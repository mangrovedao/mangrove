// SPDX-License-Identifier:	AGPL-3.0
pragma solidity ^0.8.10;

import "mgv_test/lib/MangroveTest.sol";
import "mgv_src/toy_strategies/multi_user/OasisLike.sol";

contract OasisLikeTest is MangroveTest {
  IERC20 weth;
  IERC20 usdc;
  address payable taker;
  OasisLike strat;

  function setUp() public override {
    options.quote.decimals = 6;
    super.setUp();
    taker = freshAddress("taker");
    // rename for convenience
    weth = base;
    usdc = quote;
    deal($(usdc), taker, 10_000 ether);
  }

  function test_all() public {
    part_deploy_strat();
  }

  function part_deploy_strat() public {
    strat = new OasisLike(IMangrove($(mgv)), $(this));
    strat.setGasreq(100_000);
    deal($(weth), $(this), 10 ether);
    uint prov = strat.getMissingProvision(weth, usdc, strat.ofr_gasreq(), 0, 0);
    strat.fundMangrove{value: prov * 10}();
    strat.approveMangrove(weth, type(uint).max);
    weth.approve($(strat), type(uint).max);
  }

  function part_market_orders() public {
    vm.prank(taker);
    usdc.approve($(mgv), type(uint).max);

    uint offerId = strat.newOffer(
      IOfferLogic.MakerOrder({
        outbound_tkn: weth,
        inbound_tkn: usdc,
        wants: 3000 * 10**6,
        gives: 0.5 ether,
        gasreq: strat.ofr_gasreq(),
        gasprice: 0,
        pivotId: 0
      })
    );

    vm.prank(taker);
    (uint got, , , ) = mgv.marketOrder(
      $(weth),
      $(usdc),
      0.25 ether,
      1500 * 10**6,
      true
    );
    assertEq(got, 0.25 ether, "wrong amount of weth");
    P.Offer.t offer = mgv.offers($(weth), $(usdc), offerId);
    assertEq(offer.gives(), 0.25 ether, "offer residual missing");
  }

  function part_non_reposting_offer_should_deprovision() public {
    uint bal_prev = strat.balanceOnMangrove($(this));
    uint offerId = strat.newOffer(
      IOfferLogic.MakerOrder({
        outbound_tkn: weth,
        inbound_tkn: usdc,
        wants: 3000 * 10**6,
        gives: 0.5 ether,
        gasreq: strat.ofr_gasreq(),
        gasprice: 0,
        pivotId: 0
      })
    );
    uint prov = bal_prev - strat.balanceOnMangrove($(this));
    assertGt(prov, 0, "offer provision should be > 0, is mangrove gasprice 0?");

    vm.prank(taker);
    (uint got, , uint bounty, ) = mgv.marketOrder(
      $(weth),
      $(usdc),
      0.49999999999 ether,
      1500 * 10**6,
      true
    );
    assertEq(bounty, 0, "taker sholud not receive a bounty");
    assertEq(
      got,
      minusFee($(weth), $(usdc), 0.49999999999 ether),
      "got wrong amount of weth"
    );
    assertEq(
      mgv.offers($(weth), $(usdc), offerId).gives(),
      0,
      "offer should not be reposted"
    );
    assertEq(
      strat.balanceOnMangrove($(this)),
      bal_prev,
      "incorrect deprovision amount"
    );
  }
}

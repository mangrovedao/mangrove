{
  "address": "0x2F1281443072585b2D07D0d6B7242987f4c91533",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressesProvider",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_MGV",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreditMgvUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "CreditUserTokenBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebitMgvUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebitUserTokenBalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorCode",
          "type": "string"
        }
      ],
      "name": "ErrorOnMint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "errorCode",
          "type": "string"
        }
      ],
      "name": "ErrorOnRedeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingAmount",
          "type": "uint256"
        }
      ],
      "name": "GetFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "error_data",
          "type": "bytes"
        }
      ],
      "name": "LogIncident",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NewOwnedOffer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "PosthookFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "missingAmount",
          "type": "uint256"
        }
      ],
      "name": "PutFail",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "Reneged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MGV",
      "outputs": [
        {
          "internalType": "contract IMangrove",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFR_GASREQ",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveLender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approveMangrove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOnMangrove",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fundMangrove",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasprice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "getMissingProvision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendingPool",
      "outputs": [
        {
          "internalType": "contract IPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "Offer.t",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "OfferDetail.t",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "Global.t",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "Local.t",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        }
      ],
      "name": "makerExecute",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "ret",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "outbound_tkn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "inbound_tkn",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "offerId",
              "type": "uint256"
            },
            {
              "internalType": "Offer.t",
              "name": "offer",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "wants",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gives",
              "type": "uint256"
            },
            {
              "internalType": "OfferDetail.t",
              "name": "offerDetail",
              "type": "uint256"
            },
            {
              "internalType": "Global.t",
              "name": "global",
              "type": "uint256"
            },
            {
              "internalType": "Local.t",
              "name": "local",
              "type": "uint256"
            }
          ],
          "internalType": "struct MgvLib.SingleOrder",
          "name": "order",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "makerData",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "mgvData",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MgvLib.OrderResult",
          "name": "result",
          "type": "tuple"
        }
      ],
      "name": "makerPosthook",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "tryBorrow",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "onBehalf",
          "type": "address"
        }
      ],
      "name": "maxGettableUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mgvBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasprice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pivotId",
          "type": "uint256"
        }
      ],
      "name": "newOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "fromId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxOffers",
          "type": "uint256"
        }
      ],
      "name": "offerOwners",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nextId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "offerIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "__offerOwners",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IEIP20",
          "name": "asset",
          "type": "address"
        }
      ],
      "name": "overlying",
      "outputs": [
        {
          "internalType": "contract IEIP20",
          "name": "aToken",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleGetter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "deprovision",
          "type": "bool"
        }
      ],
      "name": "retractOffer",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "received",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "name": "setAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        }
      ],
      "name": "setGasreq",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "tokenBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenBalanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "outbound_tkn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "inbound_tkn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wants",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gives",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasreq",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gasprice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pivotId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offerId",
          "type": "uint256"
        }
      ],
      "name": "updateOffer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromMangrove",
      "outputs": [
        {
          "internalType": "bool",
          "name": "noRevert",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4934d1ef83fdb6ccac7cfb6a57ce017570338856992d1a560b78e37ac8c52f8a",
  "receipt": {
    "to": null,
    "from": "0x47897EE61498D02B18794601Ed3A71896A1Ff894",
    "contractAddress": "0x2F1281443072585b2D07D0d6B7242987f4c91533",
    "transactionIndex": 3,
    "gasUsed": "3775416",
    "logsBloom": "0x
    "blockHash": "0xbb04346d35a36b5b7887eb880f0d946b5a8e72be17ee06a1fb6833273f8cbd06",
    "transactionHash": "0x4934d1ef83fdb6ccac7cfb6a57ce017570338856992d1a560b78e37ac8c52f8a",
    "logs": [
      {
        "transactionIndex": 3,
        "blockNumber": 25731362,
        "transactionHash": "0x4934d1ef83fdb6ccac7cfb6a57ce017570338856992d1a560b78e37ac8c52f8a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000047897ee61498d02b18794601ed3a71896a1ff894",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000017a8c47a1aa454000000000000000000000000000000000000000000000000006c31fa3452efb40000000000000000000000000000000000000000000000d732b773612462816820000000000000000000000000000000000000000000000000548935ba384b600000000000000000000000000000000000000000000000d732cf1c259e7d25bc2",
        "logIndex": 9,
        "blockHash": "0xbb04346d35a36b5b7887eb880f0d946b5a8e72be17ee06a1fb6833273f8cbd06"
      }
    ],
    "blockNumber": 25731362,
    "cumulativeGasUsed": "4306734",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA5375B08232a0f5e911c8a92B390662e098a579A",
    "0xa34b6ADdf822177258Cbd0A9c3a80600C1028Ca8"
  ],
  "solcInputHash": "3541e2eb00f8f89e6f005d4e098215c1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressesProvider\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_MGV\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditMgvUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CreditUserTokenBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebitMgvUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebitUserTokenBalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorCode\",\"type\":\"string\"}],\"name\":\"ErrorOnMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"errorCode\",\"type\":\"string\"}],\"name\":\"ErrorOnRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingAmount\",\"type\":\"uint256\"}],\"name\":\"GetFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error_data\",\"type\":\"bytes\"}],\"name\":\"LogIncident\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwnedOffer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"PosthookFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"missingAmount\",\"type\":\"uint256\"}],\"name\":\"PutFail\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"Reneged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MGV\",\"outputs\":[{\"internalType\":\"contract IMangrove\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFR_GASREQ\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveLender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approveMangrove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOnMangrove\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundMangrove\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"getMissingProvision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendingPool\",\"outputs\":[{\"internalType\":\"contract IPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"Offer.t\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"OfferDetail.t\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"Global.t\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"Local.t\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"}],\"name\":\"makerExecute\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"ret\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"Offer.t\",\"name\":\"offer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"OfferDetail.t\",\"name\":\"offerDetail\",\"type\":\"uint256\"},{\"internalType\":\"Global.t\",\"name\":\"global\",\"type\":\"uint256\"},{\"internalType\":\"Local.t\",\"name\":\"local\",\"type\":\"uint256\"}],\"internalType\":\"struct MgvLib.SingleOrder\",\"name\":\"order\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"makerData\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"mgvData\",\"type\":\"bytes32\"}],\"internalType\":\"struct MgvLib.OrderResult\",\"name\":\"result\",\"type\":\"tuple\"}],\"name\":\"makerPosthook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"tryBorrow\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"onBehalf\",\"type\":\"address\"}],\"name\":\"maxGettableUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mgvBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pivotId\",\"type\":\"uint256\"}],\"name\":\"newOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fromId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxOffers\",\"type\":\"uint256\"}],\"name\":\"offerOwners\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nextId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"offerIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"__offerOwners\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"overlying\",\"outputs\":[{\"internalType\":\"contract IEIP20\",\"name\":\"aToken\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleGetter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"deprovision\",\"type\":\"bool\"}],\"name\":\"retractOffer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"received\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"}],\"name\":\"setGasreq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outbound_tkn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbound_tkn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wants\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gives\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasreq\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasprice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pivotId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offerId\",\"type\":\"uint256\"}],\"name\":\"updateOffer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFromMangrove\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noRevert\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"NewOwnedOffer(address,address,uint256,address)\":{\"notice\":\"Multi offer specific Events \"},\"PosthookFail(address,address,uint256,string)\":{\"notice\":\"Events \"}},\"kind\":\"user\",\"methods\":{\"approveLender(address,uint256)\":{\"notice\":\"approval of overlying contract by the underlying is necessary for minting and repaying borrowuser must use this function to do so.\"},\"approveMangrove(address,uint256)\":{\"notice\":\"`this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function NB anyone can call this function\"},\"maxGettableUnderlying(address,bool,address)\":{\"notice\":\"Computes maximal maximal redeem capacity (R) and max borrow capacity (B|R) after R has been redeemed returns (R, B|R)\"},\"withdrawFromMangrove(address,uint256)\":{\"notice\":\"withdraws ETH from the bounty vault of the Mangrove. NB: `Mangrove.fund` function need not be called by `this` so is not included here. Warning: this function should not be called internally for msg.sender provision is being checked\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol\":\"OfferProxy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// IERC20.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint);\\n\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n\\n  /// for wETH contract\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xad0b3300c8afaba6562a533107fa9175dcecf13c0bebe24f05a84576eb80a5e6\",\"license\":\"Unlicense\"},\"contracts/MgvLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// MgvLib.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./MgvPack.sol\\\" as P;\\n\\n/* # Structs\\nThe structs defined in `structs.js` have their counterpart as solidity structs that are easy to manipulate for outside contracts / callers of view functions. */\\n\\nlibrary MgvLib {\\n  /*\\n   Some miscellaneous data types useful to `Mangrove` and external contracts */\\n  //+clear+\\n\\n  /* `SingleOrder` holds data about an order-offer match in a struct. Used by `marketOrder` and `internalSnipes` (and some of their nested functions) to avoid stack too deep errors. */\\n  struct SingleOrder {\\n    address outbound_tkn;\\n    address inbound_tkn;\\n    uint offerId;\\n    P.Offer.t offer;\\n    /* `wants`/`gives` mutate over execution. Initially the `wants`/`gives` from the taker's pov, then actual `wants`/`gives` adjusted by offer's price and volume. */\\n    uint wants;\\n    uint gives;\\n    /* `offerDetail` is only populated when necessary. */\\n    P.OfferDetail.t offerDetail;\\n    P.Global.t global;\\n    P.Local.t local;\\n  }\\n\\n  /* <a id=\\\"MgvLib/OrderResult\\\"></a> `OrderResult` holds additional data for the maker and is given to them _after_ they fulfilled an offer. It gives them their own returned data from the previous call, and an `mgvData` specifying whether the Mangrove encountered an error. */\\n\\n  struct OrderResult {\\n    /* `makerdata` holds a message that was either returned by the maker or passed as revert message at the end of the trade execution*/\\n    bytes32 makerData;\\n    /* `mgvData` is an [internal Mangrove status code](#MgvOfferTaking/statusCodes) code. */\\n    bytes32 mgvData;\\n  }\\n}\\n\\n/* # Events\\nThe events emitted for use by bots are listed here: */\\ncontract HasMgvEvents {\\n  /* * Emitted at the creation of the new Mangrove contract on the pair (`inbound_tkn`, `outbound_tkn`)*/\\n  event NewMgv();\\n\\n  /* Mangrove adds or removes wei from `maker`'s account */\\n  /* * Credit event occurs when an offer is removed from the Mangrove or when the `fund` function is called*/\\n  event Credit(address indexed maker, uint amount);\\n  /* * Debit event occurs when an offer is posted or when the `withdraw` function is called */\\n  event Debit(address indexed maker, uint amount);\\n\\n  /* * Mangrove reconfiguration */\\n  event SetActive(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    bool value\\n  );\\n  event SetFee(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasbase(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offer_gasbase\\n  );\\n  event SetGovernance(address value);\\n  event SetMonitor(address value);\\n  event SetVault(address value);\\n  event SetUseOracle(bool value);\\n  event SetNotify(bool value);\\n  event SetGasmax(uint value);\\n  event SetDensity(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasprice(uint value);\\n\\n  /* Market order execution */\\n  event OrderStart();\\n  event OrderComplete(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address indexed taker,\\n    uint takerGot,\\n    uint takerGave,\\n    uint penalty\\n  );\\n\\n  /* * Offer execution */\\n  event OfferSuccess(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    // `maker` is not logged because it can be retrieved from the state using `(outbound_tkn,inbound_tkn,id)`.\\n    address taker,\\n    uint takerWants,\\n    uint takerGives\\n  );\\n\\n  /* Log information when a trade execution reverts or returns a non empty bytes32 word */\\n  event OfferFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    // `maker` is not logged because it can be retrieved from the state using `(outbound_tkn,inbound_tkn,id)`.\\n    address taker,\\n    uint takerWants,\\n    uint takerGives,\\n    // `mgvData` may only be `\\\"mgv/makerRevert\\\"`, `\\\"mgv/makerAbort\\\"`, `\\\"mgv/makerTransferFail\\\"` or `\\\"mgv/makerReceiveFail\\\"`\\n    bytes32 mgvData\\n  );\\n\\n  /* Log information when a posthook reverts */\\n  event PosthookFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId\\n  );\\n\\n  /* * After `permit` and `approve` */\\n  event Approval(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value\\n  );\\n\\n  /* * Mangrove closure */\\n  event Kill();\\n\\n  /* * An offer was created or updated.\\n  A few words about why we include a `prev` field, and why we don't include a\\n  `next` field: in theory clients should need neither `prev` nor a `next` field.\\n  They could just 1. Read the order book state at a given block `b`.  2. On\\n  every event, update a local copy of the orderbook.  But in practice, we do not\\n  want to force clients to keep a copy of the *entire* orderbook. There may be a\\n  long tail of spam. Now if they only start with the first $N$ offers and\\n  receive a new offer that goes to the end of the book, they cannot tell if\\n  there are missing offers between the new offer and the end of the local copy\\n  of the book.\\n  \\n  So we add a prev pointer so clients with only a prefix of the book can receive\\n  out-of-prefix offers and know what to do with them. The `next` pointer is an\\n  optimization useful in Solidity (we traverse fewer memory locations) but\\n  useless in client code.\\n  */\\n  event OfferWrite(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address maker,\\n    uint wants,\\n    uint gives,\\n    uint gasprice,\\n    uint gasreq,\\n    uint id,\\n    uint prev\\n  );\\n\\n  /* * `offerId` was present and is now removed from the book. */\\n  event OfferRetract(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id\\n  );\\n}\\n\\n/* # IMaker interface */\\ninterface IMaker {\\n  /* Called upon offer execution. \\n  - If the call fails, Mangrove will not try to transfer funds.\\n  - If the call succeeds but returndata's first 32 bytes are not 0, Mangrove will not try to transfer funds either.\\n  - If the call succeeds and returndata's first 32 bytes are 0, Mangrove will try to transfer funds.\\n  In other words, you may declare failure by reverting or by returning nonzero data. In both cases, those 32 first bytes will be passed back to you during the call to `makerPosthook` in the `result.mgvData` field.\\n     ```\\n     function tradeRevert(bytes32 data) internal pure {\\n       bytes memory revData = new bytes(32);\\n         assembly {\\n           mstore(add(revData, 32), data)\\n           revert(add(revData, 32), 32)\\n         }\\n     }\\n     ```\\n     */\\n  function makerExecute(MgvLib.SingleOrder calldata order)\\n    external\\n    returns (bytes32);\\n\\n  /* Called after all offers of an order have been executed. Posthook of the last executed order is called first and full reentrancy into the Mangrove is enabled at this time. `order` recalls key arguments of the order that was processed and `result` recalls important information for updating the current offer. (see [above](#MgvLib/OrderResult))*/\\n  function makerPosthook(\\n    MgvLib.SingleOrder calldata order,\\n    MgvLib.OrderResult calldata result\\n  ) external;\\n}\\n\\n/* # ITaker interface */\\ninterface ITaker {\\n  /* Inverted mangrove only: call to taker after loans went through */\\n  function takerTrade(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    // total amount of outbound_tkn token that was flashloaned to the taker\\n    uint totalGot,\\n    // total amount of inbound_tkn token that should be made available\\n    uint totalGives\\n  ) external;\\n}\\n\\n/* # Monitor interface\\nIf enabled, the monitor receives notification after each offer execution and is read for each pair's `gasprice` and `density`. */\\ninterface IMgvMonitor {\\n  function notifySuccess(MgvLib.SingleOrder calldata sor, address taker)\\n    external;\\n\\n  function notifyFail(MgvLib.SingleOrder calldata sor, address taker) external;\\n\\n  function read(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (uint gasprice, uint density);\\n}\\n\",\"keccak256\":\"0x2cc99406df466faaed80275ab9376103b007c2e96cfae09ab9f1f4bba0fcdae9\",\"license\":\"Unlicense\"},\"contracts/MgvPack.sol\":{\"content\":\"pragma solidity ^0.8.10;\\n\\n// SPDX-License-Identifier: Unlicense\\n\\n// MgvPack.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* ************************************************** *\\n            GENERATED FILE. DO NOT EDIT.\\n * ************************************************** */\\n\\n/* since you can't convert bool to uint in an expression without conditionals,\\n * we add a file-level function and rely on compiler optimization\\n */\\nfunction uint_of_bool(bool b) pure returns (uint u) {\\n  assembly { u := b }\\n}\\n\\n// fields are of the form [name,bits,type]\\n\\n// Can't put all structs under a 'Structs' library due to bad variable shadowing rules in Solidity\\n// (would generate lots of spurious warnings about a nameclash between Structs.Offer and library Offer for instance)\\n// struct_defs are of the form [name,obj]\\nstruct OfferStruct {\\n  uint prev;\\n  uint next;\\n  uint wants;\\n  uint gives;\\n}\\nstruct OfferDetailStruct {\\n  address maker;\\n  uint gasreq;\\n  uint offer_gasbase;\\n  uint gasprice;\\n}\\nstruct GlobalStruct {\\n  address monitor;\\n  bool useOracle;\\n  bool notify;\\n  uint gasprice;\\n  uint gasmax;\\n  bool dead;\\n}\\nstruct LocalStruct {\\n  bool active;\\n  uint fee;\\n  uint density;\\n  uint offer_gasbase;\\n  bool lock;\\n  uint best;\\n  uint last;\\n}\\n\\nlibrary Offer {\\n  //some type safety for each struct\\n  type t is uint;\\n\\n  uint constant prev_bits  = 32;\\n  uint constant next_bits  = 32;\\n  uint constant wants_bits = 96;\\n  uint constant gives_bits = 96;\\n\\n  uint constant prev_before  = 0;\\n  uint constant next_before  = prev_before  + prev_bits ;\\n  uint constant wants_before = next_before  + next_bits ;\\n  uint constant gives_before = wants_before + wants_bits;\\n\\n  uint constant prev_mask  = 0x00000000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint constant next_mask  = 0xffffffff00000000ffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint constant wants_mask = 0xffffffffffffffff000000000000000000000000ffffffffffffffffffffffff;\\n  uint constant gives_mask = 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000;\\n\\n  function to_struct(t __packed) internal pure returns (OfferStruct memory __s) { unchecked {\\n    __s.prev = (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n    __s.next = (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n    __s.wants = (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n    __s.gives = (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n\\n  function t_of_struct(OfferStruct memory __s) internal pure returns (t) { unchecked {\\n    return pack(__s.prev, __s.next, __s.wants, __s.gives);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function pack(uint __prev, uint __next, uint __wants, uint __gives) internal pure returns (t) { unchecked {\\n    return t.wrap(((((0\\n                  | ((__prev << (256-prev_bits)) >> prev_before))\\n                  | ((__next << (256-next_bits)) >> next_before))\\n                  | ((__wants << (256-wants_bits)) >> wants_before))\\n                  | ((__gives << (256-gives_bits)) >> gives_before)));\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (uint __prev, uint __next, uint __wants, uint __gives) { unchecked {\\n    __prev = (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n    __next = (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n    __wants = (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n    __gives = (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n\\n  function prev(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << prev_before) >> (256-prev_bits);\\n  }}\\n  function prev(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & prev_mask)\\n                  | ((val << (256-prev_bits) >> prev_before)));\\n  }}\\n  function next(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << next_before) >> (256-next_bits);\\n  }}\\n  function next(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & next_mask)\\n                  | ((val << (256-next_bits) >> next_before)));\\n  }}\\n  function wants(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << wants_before) >> (256-wants_bits);\\n  }}\\n  function wants(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & wants_mask)\\n                  | ((val << (256-wants_bits) >> wants_before)));\\n  }}\\n  function gives(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gives_before) >> (256-gives_bits);\\n  }}\\n  function gives(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gives_mask)\\n                  | ((val << (256-gives_bits) >> gives_before)));\\n  }}\\n}\\n\\nlibrary OfferDetail {\\n  //some type safety for each struct\\n  type t is uint;\\n\\n  uint constant maker_bits         = 160;\\n  uint constant gasreq_bits        = 24;\\n  uint constant offer_gasbase_bits = 24;\\n  uint constant gasprice_bits      = 16;\\n\\n  uint constant maker_before         = 0;\\n  uint constant gasreq_before        = maker_before         + maker_bits        ;\\n  uint constant offer_gasbase_before = gasreq_before        + gasreq_bits       ;\\n  uint constant gasprice_before      = offer_gasbase_before + offer_gasbase_bits;\\n\\n  uint constant maker_mask         = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n  uint constant gasreq_mask        = 0xffffffffffffffffffffffffffffffffffffffff000000ffffffffffffffffff;\\n  uint constant offer_gasbase_mask = 0xffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffffff;\\n  uint constant gasprice_mask      = 0xffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffffffff;\\n\\n  function to_struct(t __packed) internal pure returns (OfferDetailStruct memory __s) { unchecked {\\n    __s.maker = address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n    __s.gasreq = (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n    __s.offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __s.gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n\\n  function t_of_struct(OfferDetailStruct memory __s) internal pure returns (t) { unchecked {\\n    return pack(__s.maker, __s.gasreq, __s.offer_gasbase, __s.gasprice);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function pack(address __maker, uint __gasreq, uint __offer_gasbase, uint __gasprice) internal pure returns (t) { unchecked {\\n    return t.wrap(((((0\\n                  | ((uint(uint160(__maker)) << (256-maker_bits)) >> maker_before))\\n                  | ((__gasreq << (256-gasreq_bits)) >> gasreq_before))\\n                  | ((__offer_gasbase << (256-offer_gasbase_bits)) >> offer_gasbase_before))\\n                  | ((__gasprice << (256-gasprice_bits)) >> gasprice_before)));\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (address __maker, uint __gasreq, uint __offer_gasbase, uint __gasprice) { unchecked {\\n    __maker = address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n    __gasreq = (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n    __offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n\\n  function maker(t __packed) internal pure returns(address) { unchecked {\\n    return address(uint160((t.unwrap(__packed) << maker_before) >> (256-maker_bits)));\\n  }}\\n  function maker(t __packed,address val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & maker_mask)\\n                  | ((uint(uint160(val)) << (256-maker_bits) >> maker_before)));\\n  }}\\n  function gasreq(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasreq_before) >> (256-gasreq_bits);\\n  }}\\n  function gasreq(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasreq_mask)\\n                  | ((val << (256-gasreq_bits) >> gasreq_before)));\\n  }}\\n  function offer_gasbase(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n  }}\\n  function offer_gasbase(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & offer_gasbase_mask)\\n                  | ((val << (256-offer_gasbase_bits) >> offer_gasbase_before)));\\n  }}\\n  function gasprice(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n  function gasprice(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasprice_mask)\\n                  | ((val << (256-gasprice_bits) >> gasprice_before)));\\n  }}\\n}\\n\\nlibrary Global {\\n  //some type safety for each struct\\n  type t is uint;\\n\\n  uint constant monitor_bits   = 160;\\n  uint constant useOracle_bits = 8;\\n  uint constant notify_bits    = 8;\\n  uint constant gasprice_bits  = 16;\\n  uint constant gasmax_bits    = 24;\\n  uint constant dead_bits      = 8;\\n\\n  uint constant monitor_before   = 0;\\n  uint constant useOracle_before = monitor_before   + monitor_bits  ;\\n  uint constant notify_before    = useOracle_before + useOracle_bits;\\n  uint constant gasprice_before  = notify_before    + notify_bits   ;\\n  uint constant gasmax_before    = gasprice_before  + gasprice_bits ;\\n  uint constant dead_before      = gasmax_before    + gasmax_bits   ;\\n\\n  uint constant monitor_mask   = 0x0000000000000000000000000000000000000000ffffffffffffffffffffffff;\\n  uint constant useOracle_mask = 0xffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff;\\n  uint constant notify_mask    = 0xffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffff;\\n  uint constant gasprice_mask  = 0xffffffffffffffffffffffffffffffffffffffffffff0000ffffffffffffffff;\\n  uint constant gasmax_mask    = 0xffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffffff;\\n  uint constant dead_mask      = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffff;\\n\\n  function to_struct(t __packed) internal pure returns (GlobalStruct memory __s) { unchecked {\\n    __s.monitor = address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n    __s.useOracle = (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n    __s.notify = (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n    __s.gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n    __s.gasmax = (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n    __s.dead = (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n\\n  function t_of_struct(GlobalStruct memory __s) internal pure returns (t) { unchecked {\\n    return pack(__s.monitor, __s.useOracle, __s.notify, __s.gasprice, __s.gasmax, __s.dead);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function pack(address __monitor, bool __useOracle, bool __notify, uint __gasprice, uint __gasmax, bool __dead) internal pure returns (t) { unchecked {\\n    return t.wrap(((((((0\\n                  | ((uint(uint160(__monitor)) << (256-monitor_bits)) >> monitor_before))\\n                  | ((uint_of_bool(__useOracle) << (256-useOracle_bits)) >> useOracle_before))\\n                  | ((uint_of_bool(__notify) << (256-notify_bits)) >> notify_before))\\n                  | ((__gasprice << (256-gasprice_bits)) >> gasprice_before))\\n                  | ((__gasmax << (256-gasmax_bits)) >> gasmax_before))\\n                  | ((uint_of_bool(__dead) << (256-dead_bits)) >> dead_before)));\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (address __monitor, bool __useOracle, bool __notify, uint __gasprice, uint __gasmax, bool __dead) { unchecked {\\n    __monitor = address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n    __useOracle = (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n    __notify = (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n    __gasprice = (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n    __gasmax = (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n    __dead = (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n\\n  function monitor(t __packed) internal pure returns(address) { unchecked {\\n    return address(uint160((t.unwrap(__packed) << monitor_before) >> (256-monitor_bits)));\\n  }}\\n  function monitor(t __packed,address val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & monitor_mask)\\n                  | ((uint(uint160(val)) << (256-monitor_bits) >> monitor_before)));\\n  }}\\n  function useOracle(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << useOracle_before) >> (256-useOracle_bits)) > 0);\\n  }}\\n  function useOracle(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & useOracle_mask)\\n                  | ((uint_of_bool(val) << (256-useOracle_bits) >> useOracle_before)));\\n  }}\\n  function notify(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << notify_before) >> (256-notify_bits)) > 0);\\n  }}\\n  function notify(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & notify_mask)\\n                  | ((uint_of_bool(val) << (256-notify_bits) >> notify_before)));\\n  }}\\n  function gasprice(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasprice_before) >> (256-gasprice_bits);\\n  }}\\n  function gasprice(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasprice_mask)\\n                  | ((val << (256-gasprice_bits) >> gasprice_before)));\\n  }}\\n  function gasmax(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << gasmax_before) >> (256-gasmax_bits);\\n  }}\\n  function gasmax(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & gasmax_mask)\\n                  | ((val << (256-gasmax_bits) >> gasmax_before)));\\n  }}\\n  function dead(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << dead_before) >> (256-dead_bits)) > 0);\\n  }}\\n  function dead(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & dead_mask)\\n                  | ((uint_of_bool(val) << (256-dead_bits) >> dead_before)));\\n  }}\\n}\\n\\nlibrary Local {\\n  //some type safety for each struct\\n  type t is uint;\\n\\n  uint constant active_bits        = 8;\\n  uint constant fee_bits           = 16;\\n  uint constant density_bits       = 112;\\n  uint constant offer_gasbase_bits = 24;\\n  uint constant lock_bits          = 8;\\n  uint constant best_bits          = 32;\\n  uint constant last_bits          = 32;\\n\\n  uint constant active_before        = 0;\\n  uint constant fee_before           = active_before        + active_bits       ;\\n  uint constant density_before       = fee_before           + fee_bits          ;\\n  uint constant offer_gasbase_before = density_before       + density_bits      ;\\n  uint constant lock_before          = offer_gasbase_before + offer_gasbase_bits;\\n  uint constant best_before          = lock_before          + lock_bits         ;\\n  uint constant last_before          = best_before          + best_bits         ;\\n\\n  uint constant active_mask        = 0x00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint constant fee_mask           = 0xff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n  uint constant density_mask       = 0xffffff0000000000000000000000000000ffffffffffffffffffffffffffffff;\\n  uint constant offer_gasbase_mask = 0xffffffffffffffffffffffffffffffffff000000ffffffffffffffffffffffff;\\n  uint constant lock_mask          = 0xffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffff;\\n  uint constant best_mask          = 0xffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffff;\\n  uint constant last_mask          = 0xffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffffff;\\n\\n  function to_struct(t __packed) internal pure returns (LocalStruct memory __s) { unchecked {\\n    __s.active = (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n    __s.fee = (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n    __s.density = (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n    __s.offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __s.lock = (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n    __s.best = (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n    __s.last = (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n\\n  function t_of_struct(LocalStruct memory __s) internal pure returns (t) { unchecked {\\n    return pack(__s.active, __s.fee, __s.density, __s.offer_gasbase, __s.lock, __s.best, __s.last);\\n  }}\\n\\n  function eq(t __packed1, t __packed2) internal pure returns (bool) { unchecked {\\n    return t.unwrap(__packed1) == t.unwrap(__packed2);\\n  }}\\n\\n  function pack(bool __active, uint __fee, uint __density, uint __offer_gasbase, bool __lock, uint __best, uint __last) internal pure returns (t) { unchecked {\\n    return t.wrap((((((((0\\n                  | ((uint_of_bool(__active) << (256-active_bits)) >> active_before))\\n                  | ((__fee << (256-fee_bits)) >> fee_before))\\n                  | ((__density << (256-density_bits)) >> density_before))\\n                  | ((__offer_gasbase << (256-offer_gasbase_bits)) >> offer_gasbase_before))\\n                  | ((uint_of_bool(__lock) << (256-lock_bits)) >> lock_before))\\n                  | ((__best << (256-best_bits)) >> best_before))\\n                  | ((__last << (256-last_bits)) >> last_before)));\\n  }}\\n\\n  function unpack(t __packed) internal pure returns (bool __active, uint __fee, uint __density, uint __offer_gasbase, bool __lock, uint __best, uint __last) { unchecked {\\n    __active = (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n    __fee = (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n    __density = (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n    __offer_gasbase = (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n    __lock = (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n    __best = (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n    __last = (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n\\n  function active(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << active_before) >> (256-active_bits)) > 0);\\n  }}\\n  function active(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & active_mask)\\n                  | ((uint_of_bool(val) << (256-active_bits) >> active_before)));\\n  }}\\n  function fee(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << fee_before) >> (256-fee_bits);\\n  }}\\n  function fee(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & fee_mask)\\n                  | ((val << (256-fee_bits) >> fee_before)));\\n  }}\\n  function density(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << density_before) >> (256-density_bits);\\n  }}\\n  function density(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & density_mask)\\n                  | ((val << (256-density_bits) >> density_before)));\\n  }}\\n  function offer_gasbase(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << offer_gasbase_before) >> (256-offer_gasbase_bits);\\n  }}\\n  function offer_gasbase(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & offer_gasbase_mask)\\n                  | ((val << (256-offer_gasbase_bits) >> offer_gasbase_before)));\\n  }}\\n  function lock(t __packed) internal pure returns(bool) { unchecked {\\n    return (((t.unwrap(__packed) << lock_before) >> (256-lock_bits)) > 0);\\n  }}\\n  function lock(t __packed,bool val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & lock_mask)\\n                  | ((uint_of_bool(val) << (256-lock_bits) >> lock_before)));\\n  }}\\n  function best(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << best_before) >> (256-best_bits);\\n  }}\\n  function best(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & best_mask)\\n                  | ((val << (256-best_bits) >> best_before)));\\n  }}\\n  function last(t __packed) internal pure returns(uint) { unchecked {\\n    return (t.unwrap(__packed) << last_before) >> (256-last_bits);\\n  }}\\n  function last(t __packed,uint val) internal pure returns(t) { unchecked {\\n    return t.wrap((t.unwrap(__packed) & last_mask)\\n                  | ((val << (256-last_bits) >> last_before)));\\n  }}\\n}\\n\",\"keccak256\":\"0x4a8144510dd78a509a164e5e33bf5d7224346b5c43ec8133a13b19633602e754\",\"license\":\"Unlicense\"},\"contracts/Strategies/OfferLogics/AaveV3Module.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n//AaveLender.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"../interfaces/aave/V3/IPool.sol\\\";\\nimport {IPoolAddressesProvider} from \\\"../interfaces/aave/V3/IPoolAddressesProvider.sol\\\";\\nimport \\\"../interfaces/aave/V3/IPriceOracleGetter.sol\\\";\\nimport {ReserveConfiguration as RC} from \\\"../lib/aave/V3/ReserveConfiguration.sol\\\";\\nimport \\\"../interfaces/IMangrove.sol\\\";\\nimport \\\"../interfaces/IEIP20.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\ncontract AaveV3Module {\\n  event ErrorOnRedeem(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint indexed offerId,\\n    uint amount,\\n    string errorCode\\n  );\\n  event ErrorOnMint(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint indexed offerId,\\n    uint amount,\\n    string errorCode\\n  );\\n\\n  // address of the lendingPool\\n  IPool public immutable lendingPool;\\n  IPriceOracleGetter public immutable priceOracle;\\n  uint16 referralCode;\\n\\n  constructor(address _addressesProvider, uint _referralCode) {\\n    require(\\n      uint16(_referralCode) == _referralCode,\\n      \\\"Referral code should be uint16\\\"\\n    );\\n\\n    referralCode = uint16(referralCode); // for aave reference, put 0 for tests\\n\\n    address _priceOracle = IPoolAddressesProvider(_addressesProvider)\\n      .getAddress(\\\"PRICE_ORACLE\\\");\\n\\n    address _lendingPool = IPoolAddressesProvider(_addressesProvider).getPool();\\n\\n    require(_lendingPool != address(0), \\\"Invalid lendingPool address\\\");\\n    require(_priceOracle != address(0), \\\"Invalid priceOracle address\\\");\\n    lendingPool = IPool(_lendingPool);\\n    priceOracle = IPriceOracleGetter(_priceOracle);\\n  }\\n\\n  /**************************************************************************/\\n  ///@notice Required functions to let `this` contract interact with Aave\\n  /**************************************************************************/\\n\\n  ///@notice approval of overlying contract by the underlying is necessary for minting and repaying borrow\\n  ///@notice user must use this function to do so.\\n  function approveLender(address token, uint amount) public {\\n    IEIP20(token).approve(address(lendingPool), amount);\\n  }\\n\\n  ///@notice exits markets\\n  function _exitMarket(IEIP20 underlying) internal {\\n    lendingPool.setUserUseReserveAsCollateral(address(underlying), false);\\n  }\\n\\n  function _enterMarkets(IEIP20[] calldata underlyings) internal {\\n    for (uint i = 0; i < underlyings.length; i++) {\\n      lendingPool.setUserUseReserveAsCollateral(address(underlyings[i]), true);\\n    }\\n  }\\n\\n  function overlying(IEIP20 asset) public view returns (IEIP20 aToken) {\\n    aToken = IEIP20(lendingPool.getReserveData(address(asset)).aTokenAddress);\\n  }\\n\\n  // structs to avoir stack too deep in maxGettableUnderlying\\n  struct Underlying {\\n    uint ltv;\\n    uint liquidationThreshold;\\n    uint decimals;\\n    uint price;\\n  }\\n\\n  struct Account {\\n    uint collateral;\\n    uint debt;\\n    uint borrowPower;\\n    uint redeemPower;\\n    uint ltv;\\n    uint liquidationThreshold;\\n    uint health;\\n    uint balanceOfUnderlying;\\n  }\\n\\n  /// @notice Computes maximal maximal redeem capacity (R) and max borrow capacity (B|R) after R has been redeemed\\n  /// returns (R, B|R)\\n\\n  function maxGettableUnderlying(\\n    address asset,\\n    bool tryBorrow,\\n    address onBehalf\\n  ) public view returns (uint, uint) {\\n    Underlying memory underlying; // asset parameters\\n    Account memory account; // accound parameters\\n    (\\n      account.collateral,\\n      account.debt,\\n      account.borrowPower, // avgLtv * sumCollateralEth - sumDebtEth\\n      account.liquidationThreshold,\\n      account.ltv,\\n      account.health // avgLiquidityThreshold * sumCollateralEth / sumDebtEth  -- should be less than 10**18\\n    ) = lendingPool.getUserAccountData(onBehalf);\\n    DataTypes.ReserveData memory reserveData = lendingPool.getReserveData(\\n      asset\\n    );\\n    (\\n      underlying.ltv, // collateral factor for lending\\n      underlying.liquidationThreshold, // collateral factor for borrowing\\n      ,\\n      /*liquidationBonus*/\\n      underlying.decimals,\\n      /*reserveFactor*/\\n      /*emode_category*/\\n      ,\\n\\n    ) = RC.getParams(reserveData.configuration);\\n    account.balanceOfUnderlying = IEIP20(reserveData.aTokenAddress).balanceOf(\\n      onBehalf\\n    );\\n\\n    underlying.price = priceOracle.getAssetPrice(asset); // divided by 10**underlying.decimals\\n\\n    // account.redeemPower = account.liquidationThreshold * account.collateral - account.debt\\n    account.redeemPower =\\n      (account.liquidationThreshold * account.collateral) /\\n      10**4 -\\n      account.debt;\\n    // max redeem capacity = account.redeemPower/ underlying.liquidationThreshold * underlying.price\\n    // unless account doesn't have enough collateral in asset token (hence the min())\\n\\n    uint maxRedeemableUnderlying = (account.redeemPower * // in 10**underlying.decimals\\n        10**(underlying.decimals) *\\n        10**4) / (underlying.liquidationThreshold * underlying.price);\\n\\n    maxRedeemableUnderlying = (maxRedeemableUnderlying <\\n      account.balanceOfUnderlying)\\n      ? maxRedeemableUnderlying\\n      : account.balanceOfUnderlying;\\n\\n    if (!tryBorrow) {\\n      //gas saver\\n      return (maxRedeemableUnderlying, 0);\\n    }\\n    // computing max borrow capacity on the premisses that maxRedeemableUnderlying has been redeemed.\\n    // max borrow capacity = (account.borrowPower - (ltv*redeemed)) / underlying.ltv * underlying.price\\n\\n    uint borrowPowerImpactOfRedeemInUnderlying = (maxRedeemableUnderlying *\\n      underlying.ltv) / 10**4;\\n\\n    uint borrowPowerInUnderlying = (account.borrowPower *\\n      10**underlying.decimals) / underlying.price;\\n\\n    if (borrowPowerImpactOfRedeemInUnderlying > borrowPowerInUnderlying) {\\n      // no more borrowPower left after max redeem operation\\n      return (maxRedeemableUnderlying, 0);\\n    }\\n\\n    // max borrow power in underlying after max redeem has been withdrawn\\n    uint maxBorrowAfterRedeemInUnderlying = borrowPowerInUnderlying -\\n      borrowPowerImpactOfRedeemInUnderlying;\\n\\n    return (maxRedeemableUnderlying, maxBorrowAfterRedeemInUnderlying);\\n  }\\n\\n  function aaveRedeem(\\n    uint amountToRedeem,\\n    address onBehalf,\\n    ML.SingleOrder calldata order\\n  ) internal returns (uint) {\\n    try\\n      lendingPool.withdraw(order.outbound_tkn, amountToRedeem, onBehalf)\\n    returns (uint withdrawn) {\\n      //aave redeem was a success\\n      if (amountToRedeem == withdrawn) {\\n        return 0;\\n      } else {\\n        return (amountToRedeem - withdrawn);\\n      }\\n    } catch Error(string memory message) {\\n      emit ErrorOnRedeem(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        amountToRedeem,\\n        message\\n      );\\n      return amountToRedeem;\\n    }\\n  }\\n\\n  function _mint(\\n    uint amount,\\n    address token,\\n    address onBehalf\\n  ) internal {\\n    lendingPool.deposit(token, amount, onBehalf, referralCode);\\n  }\\n\\n  // adapted from https://medium.com/compound-finance/supplying-assets-to-the-compound-protocol-ec2cf5df5aa#afff\\n  // utility to supply erc20 to compound\\n  // NB `ctoken` contract MUST be approved to perform `transferFrom token` by `this` contract.\\n  /// @notice user need to approve ctoken in order to mint\\n  function aaveMint(\\n    uint amount,\\n    address onBehalf,\\n    ML.SingleOrder calldata order\\n  ) internal returns (uint) {\\n    // contract must haveallowance()to spend funds on behalf ofmsg.sender for at-leastamount for the asset being deposited. This can be done via the standard ERC20 approve() method.\\n    try lendingPool.deposit(order.inbound_tkn, amount, onBehalf, referralCode) {\\n      return 0;\\n    } catch Error(string memory message) {\\n      emit ErrorOnMint(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        amount,\\n        message\\n      );\\n    } catch {\\n      emit ErrorOnMint(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        amount,\\n        \\\"unexpected\\\"\\n      );\\n    }\\n    return amount;\\n  }\\n}\\n\",\"keccak256\":\"0x32a83eb735a662ae04f632995b0e0d6b39640ac95b2952e88fb92c33cf6aea33\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MangroveOffer.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangroveOffer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\nimport \\\"../lib/AccessControlled.sol\\\";\\nimport \\\"../interfaces/IOfferLogic.sol\\\";\\nimport \\\"../interfaces/IMangrove.sol\\\";\\nimport \\\"../interfaces/IEIP20.sol\\\";\\n\\n// Naming scheme:\\n// `f() public`: can be used as is in all descendants of `this` contract\\n// `_f() internal`: descendant of this contract should provide a public wrapper of this function\\n// `__f__() virtual internal`: descendant of this contract may override this function to specialize the strat\\n\\n/// MangroveOffer is the basic building block to implement a reactive offer that interfaces with the Mangrove\\nabstract contract MangroveOffer is AccessControlled, IOfferLogic {\\n  using P.Offer for P.Offer.t;\\n  using P.OfferDetail for P.OfferDetail.t;\\n  using P.Global for P.Global.t;\\n  using P.Local for P.Local.t;\\n\\n  bytes32 immutable RENEGED = \\\"MangroveOffer/reneged\\\";\\n  bytes32 immutable PUTFAILURE = \\\"MangroveOffer/putFailure\\\";\\n  bytes32 immutable OUTOFLIQUIDITY = \\\"MangroveOffer/outOfLiquidity\\\";\\n\\n  // The deployed Mangrove contract\\n  IMangrove public immutable MGV;\\n\\n  // `this` contract entypoint is `makerExecute` or `makerPosthook` if `msg.sender == address(MGV)`\\n  // `this` contract was called on an admin function iff `msg.sender = admin`\\n  modifier mgvOrAdmin() {\\n    require(\\n      msg.sender == admin || msg.sender == address(MGV),\\n      \\\"AccessControlled/Invalid\\\"\\n    );\\n    _;\\n  }\\n  // default values\\n  uint public override OFR_GASREQ = 100_000;\\n\\n  // necessary function to withdraw funds from Mangrove\\n  receive() external payable virtual {}\\n\\n  constructor(address payable _mgv) {\\n    MGV = IMangrove(_mgv);\\n  }\\n\\n  /////// Mandatory callback functions\\n\\n  // `makerExecute` is the callback function to execute all offers that were posted on Mangrove by `this` contract.\\n  // it may not be overriden although it can be customized using `__lastLook__`, `__put__` and `__get__` hooks.\\n  // NB #1: When overriding the above hooks, the Offer Makers should make sure they do not revert in order if they wish to post logs in case of bad executions.\\n  // NB #2: if `makerExecute` does revert, the offer will be considered to be refusing the trade.\\n  // NB #3: `makerExecute` must return the empty bytes to signal to MGV it wishes to perform the trade. Any other returned byes will signal to MGV that `this` contract does not wish to proceed with the trade\\n  // NB #4: Reneging on trade by either reverting or returning non empty bytes will have the following effects:\\n  // * Offer is removed from the Order Book\\n  // * Offer bounty will be withdrawn from offer provision and sent to the offer taker. The remaining provision will be credited to the maker account on Mangrove\\n  function makerExecute(ML.SingleOrder calldata order)\\n    external\\n    override\\n    onlyCaller(address(MGV))\\n    returns (bytes32 ret)\\n  {\\n    if (!__lastLook__(order)) {\\n      // hook to check order details and decide whether `this` contract should renege on the offer.\\n      emit Reneged(order.outbound_tkn, order.inbound_tkn, order.offerId);\\n      return RENEGED;\\n    }\\n    uint missingPut = __put__(order.gives, order); // implements what should be done with the liquidity that is flashswapped by the offer taker to `this` contract\\n    if (missingPut > 0) {\\n      emit PutFail(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        missingPut\\n      );\\n      return PUTFAILURE;\\n    }\\n    uint missingGet = __get__(order.wants, order); // implements how `this` contract should make the outbound tokens available\\n    if (missingGet > 0) {\\n      emit GetFail(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        missingGet\\n      );\\n      return OUTOFLIQUIDITY;\\n    }\\n  }\\n\\n  // `makerPosthook` is the callback function that is called by Mangrove *after* the offer execution.\\n  // It may not be overriden although it can be customized via the post-hooks `__posthookSuccess__`, `__posthookGetFailure__`, `__posthookReneged__` and `__posthookFallback__` (see below).\\n  // Offer Maker SHOULD make sure the overriden posthooks do not revert in order to be able to post logs in case of bad executions.\\n  function makerPosthook(\\n    ML.SingleOrder calldata order,\\n    ML.OrderResult calldata result\\n  ) external override onlyCaller(address(MGV)) {\\n    if (result.mgvData == \\\"mgv/tradeSuccess\\\") {\\n      // if trade was a success\\n      __posthookSuccess__(order);\\n      return;\\n    }\\n    // if trade was aborted because of a lack of liquidity\\n    if (result.makerData == OUTOFLIQUIDITY) {\\n      __posthookGetFailure__(order);\\n      return;\\n    }\\n    // if trade was reneged on during lastLook\\n    if (result.makerData == RENEGED) {\\n      __posthookReneged__(order);\\n      return;\\n    }\\n    // if trade failed unexpectedly (`makerExecute` reverted or Mangrove failed to transfer the outbound tokens to the Offer Taker)\\n    __posthookFallback__(order, result);\\n    return;\\n  }\\n\\n  // sets default gasreq for `new/updateOffer`\\n  function setGasreq(uint gasreq) public override mgvOrAdmin {\\n    require(uint24(gasreq) == gasreq, \\\"MangroveOffer/gasreq/overflow\\\");\\n    OFR_GASREQ = gasreq;\\n  }\\n\\n  /// `this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function\\n  /// NB anyone can call this function\\n  function approveMangrove(address outbound_tkn, uint amount) public {\\n    require(\\n      IEIP20(outbound_tkn).approve(address(MGV), amount),\\n      \\\"mgvOffer/approve/Fail\\\"\\n    );\\n  }\\n\\n  /// withdraws ETH from the bounty vault of the Mangrove.\\n  function _withdrawFromMangrove(address payable receiver, uint amount)\\n    internal\\n    returns (bool noRevert)\\n  {\\n    require(MGV.withdraw(amount), \\\"MangroveOffer/withdraw/transferFail\\\");\\n    if (receiver != address(this)) {\\n      (noRevert, ) = receiver.call{value: amount}(\\\"\\\");\\n    } else {\\n      noRevert = true;\\n    }\\n  }\\n\\n  // returns missing provision to repost `offerId` at given `gasreq` and `gasprice`\\n  // if `offerId` is not in the Order Book, will simply return how much is needed to post\\n  function _getMissingProvision(\\n    uint balance, // offer owner balance on Mangrove\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint gasreq, // give > type(uint24).max to use `this.OFR_GASREQ()`\\n    uint gasprice, // give 0 to use Mangrove's gasprice\\n    uint offerId // set this to 0 if one is not reposting an offer\\n  ) internal view returns (uint) {\\n    (P.Global.t globalData, P.Local.t localData) = MGV.config(\\n      outbound_tkn,\\n      inbound_tkn\\n    );\\n    P.OfferDetail.t offerDetailData = MGV.offerDetails(\\n      outbound_tkn,\\n      inbound_tkn,\\n      offerId\\n    );\\n    uint _gp;\\n    if (globalData.gasprice() > gasprice) {\\n      _gp = globalData.gasprice();\\n    } else {\\n      _gp = gasprice;\\n    }\\n    if (gasreq > type(uint24).max) {\\n      gasreq = OFR_GASREQ;\\n    }\\n    uint bounty = (gasreq + localData.offer_gasbase()) * _gp * 10**9; // in WEI\\n    // if `offerId` is not in the OfferList, all returned values will be 0\\n    uint currentProvisionLocked = (offerDetailData.gasreq() +\\n      offerDetailData.offer_gasbase()) *\\n      offerDetailData.gasprice() *\\n      10**9;\\n    uint currentProvision = currentProvisionLocked + balance;\\n    return (currentProvision >= bounty ? 0 : bounty - currentProvision);\\n  }\\n\\n  ////// Default Customizable hooks for Taker Order'execution\\n\\n  // Define this hook to describe where the inbound token, which are brought by the Offer Taker, should go during Taker Order's execution.\\n  // Usage of this hook is the following:\\n  // * `amount` is the amount of `inbound` tokens whose deposit location is to be defined when entering this function\\n  // * `order` is a recall of the taker order that is at the origin of the current trade.\\n  // * Function must return `missingPut` (<=`amount`), which is the amount of `inbound` tokens whose deposit location has not been decided (possibly because of a failure) during this function execution\\n  // NB in case of preceding executions of descendant specific `__put__` implementations, `amount` might be lower than `order.gives` (how much `inbound` tokens the taker gave)\\n  function __put__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint missingPut);\\n\\n  // Define this hook to implement fetching `amount` of outbound tokens, possibly from another source than `this` contract during Taker Order's execution.\\n  // Usage of this hook is the following:\\n  // * `amount` is the amount of `outbound` tokens that still needs to be brought to the balance of `this` contract when entering this function\\n  // * `order` is a recall of the taker order that is at the origin of the current trade.\\n  // * Function must return `missingGet` (<=`amount`), which is the amount of `outbound` tokens still need to be fetched at the end of this function\\n  // NB in case of preceding executions of descendant specific `__get__` implementations, `amount` might be lower than `order.wants` (how much `outbound` tokens the taker wants)\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint missingGet);\\n\\n  // Override this hook to implement a last look check during Taker Order's execution.\\n  // Return value should be `true` if Taker Order is acceptable.\\n  // Returning `false` will cause `MakerExecute` to return the \\\"RENEGED\\\" bytes, which are interpreted by MGV as a signal that `this` contract wishes to cancel the trade\\n  function __lastLook__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (bool proceed)\\n  {\\n    order; //shh\\n    proceed = true;\\n  }\\n\\n  ////// Customizable post-hooks.\\n\\n  // Override this post-hook to implement what `this` contract should do when called back after a successfully executed order.\\n  function __posthookSuccess__(ML.SingleOrder calldata order) internal virtual {\\n    order; // shh\\n  }\\n\\n  // Override this post-hook to implement what `this` contract should do when called back after an order that failed to be executed because of a lack of liquidity (most inner call to `__get__` returned a non zero value).\\n  function __posthookGetFailure__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n  {\\n    order;\\n  }\\n\\n  // Override this post-hook to implement what `this` contract should do when called back after an order that did not pass its last look (most inner call to `__lastLook__` returned `false`).\\n  function __posthookReneged__(ML.SingleOrder calldata order) internal virtual {\\n    order; //shh\\n  }\\n\\n  // Override this post-hook to implement fallback behavior when Taker Order's execution failed unexpectedly. Information from Mangrove is accessible in `result.mgvData` for logging purpose.\\n  function __posthookFallback__(\\n    ML.SingleOrder calldata order,\\n    ML.OrderResult calldata result\\n  ) internal virtual {\\n    order;\\n    result;\\n  }\\n}\\n\",\"keccak256\":\"0x93fabfd33359c1e2ead86167c6059a0eea125a6798dbf5ee08e499fe76daa4d4\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MultiUsers/AaveV3Lender.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n//AaveLender.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"./MultiUser.sol\\\";\\nimport \\\"../AaveV3Module.sol\\\";\\n\\nabstract contract MultiUserAaveV3Lender is MultiUser, AaveV3Module {\\n  /**************************************************************************/\\n  ///@notice Required functions to let `this` contract interact with Aave\\n  /**************************************************************************/\\n\\n  // tokens are fetched on Aave (on behalf of offer owner)\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    address owner = ownerOf(\\n      order.outbound_tkn,\\n      order.inbound_tkn,\\n      order.offerId\\n    );\\n    (\\n      uint redeemable, /*maxBorrowAfterRedeem*/\\n\\n    ) = maxGettableUnderlying(order.outbound_tkn, false, owner);\\n    if (amount > redeemable) {\\n      return amount; // give up if amount is not redeemable (anti flashloan manipulation of AAVE)\\n    }\\n    // need to retreive overlyings from msg.sender (we suppose `this` is approved for that)\\n    IEIP20 aToken = overlying(IEIP20(order.outbound_tkn));\\n    try aToken.transferFrom(owner, address(this), amount) returns (\\n      bool success\\n    ) {\\n      if (success) {\\n        // amount overlying was transfered from `owner`'s wallet\\n        // anything wrong beyond this point should revert\\n        // trying to redeem from AAVE\\n        require(aaveRedeem(amount, address(this), order) == 0); // throwing to cancel overlying transfer\\n        return 0;\\n      }\\n    } catch {\\n      // nothing to be done\\n    }\\n    emit LogIncident(\\n      order.outbound_tkn,\\n      order.inbound_tkn,\\n      order.offerId,\\n      \\\"aaveV3Lender/overlyingTransferFail\\\"\\n    );\\n    return amount; // nothing was fetched\\n  }\\n\\n  // received inbound token are put on Aave on behalf of offer owner\\n  function __put__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    //optim\\n    if (amount == 0) {\\n      return 0;\\n    }\\n    address owner = ownerOf(\\n      order.outbound_tkn,\\n      order.inbound_tkn,\\n      order.offerId\\n    );\\n    // minted Atokens are sent to owner\\n    return aaveMint(amount, owner, order);\\n  }\\n}\\n\",\"keccak256\":\"0xec57e467ba8c78ea15299f7e57a6dffe27e89548405d3fe8d89d0d47ee8a0364\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// AdvancedCompoundRetail.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"../AaveV3Lender.sol\\\";\\nimport \\\"../Persistent.sol\\\";\\n\\ncontract OfferProxy is MultiUserAaveV3Lender, MultiUserPersistent {\\n  constructor(address _addressesProvider, address payable _MGV)\\n    AaveV3Module(_addressesProvider, 0)\\n    MangroveOffer(_MGV)\\n  {\\n    setGasreq(800_000); // Offer proxy requires AAVE interactions\\n  }\\n\\n  function __put__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    override(MultiUser, MultiUserAaveV3Lender)\\n    returns (uint missing)\\n  {\\n    // puts amount inbound_tkn on AAVE\\n    missing = MultiUserAaveV3Lender.__put__(amount, order);\\n  }\\n\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    override(MultiUser, MultiUserAaveV3Lender)\\n    returns (uint)\\n  {\\n    // gets tokens from AAVE's owner deposit -- will transfer aTokens from owner first\\n    return MultiUserAaveV3Lender.__get__(amount, order);\\n  }\\n\\n  function __posthookSuccess__(ML.SingleOrder calldata order)\\n    internal\\n    override(MangroveOffer, MultiUserPersistent)\\n  {\\n    // reposting residual if possible\\n    MultiUserPersistent.__posthookSuccess__(order);\\n  }\\n}\\n\",\"keccak256\":\"0x4e03abef9a899cdb6ccad50e2cfdcd4beee15d422542964a06c75d61c9fe78c7\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MultiUsers/MultiUser.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// MangroveOffer.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"../MangroveOffer.sol\\\";\\nimport \\\"../../../periphery/MgvReader.sol\\\";\\nimport \\\"../../interfaces/IOfferLogicMulti.sol\\\";\\n\\nabstract contract MultiUser is IOfferLogicMulti, MangroveOffer {\\n  mapping(address => mapping(address => mapping(uint => address)))\\n    internal _offerOwners; // outbound_tkn => inbound_tkn => offerId => ownerAddress\\n\\n  mapping(address => uint) public mgvBalance; // owner => WEI balance on mangrove\\n  mapping(address => mapping(address => uint)) public tokenBalanceOf; // erc20 => owner => balance on `this`\\n\\n  function tokenBalance(address token) external view override returns (uint) {\\n    return tokenBalanceOf[token][msg.sender];\\n  }\\n\\n  function balanceOnMangrove() external view override returns (uint) {\\n    return mgvBalance[msg.sender];\\n  }\\n\\n  function offerOwners(\\n    address reader,\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fromId,\\n    uint maxOffers\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      uint nextId,\\n      uint[] memory offerIds,\\n      address[] memory __offerOwners\\n    )\\n  {\\n    (\\n      nextId,\\n      offerIds, /*offers*/ /*offerDetails*/\\n      ,\\n\\n    ) = MgvReader(reader).offerList(\\n      outbound_tkn,\\n      inbound_tkn,\\n      fromId,\\n      maxOffers\\n    );\\n    __offerOwners = new address[](offerIds.length);\\n    for (uint i = 0; i < offerIds.length; i++) {\\n      __offerOwners[i] = ownerOf(outbound_tkn, inbound_tkn, offerIds[i]);\\n    }\\n  }\\n\\n  function creditOnMgv(address owner, uint balance) internal {\\n    mgvBalance[owner] += balance;\\n    emit CreditMgvUser(owner, balance);\\n  }\\n\\n  function debitOnMgv(address owner, uint amount) internal {\\n    require(mgvBalance[owner] >= amount, \\\"Multi/debitOnMgv/insufficient\\\");\\n    mgvBalance[owner] -= amount;\\n    emit DebitMgvUser(owner, amount);\\n  }\\n\\n  function creditToken(\\n    address token,\\n    address owner,\\n    uint amount\\n  ) internal {\\n    tokenBalanceOf[token][owner] += amount;\\n    emit CreditUserTokenBalance(owner, token, amount);\\n  }\\n\\n  function debitToken(\\n    address token,\\n    address owner,\\n    uint amount\\n  ) internal {\\n    if (amount == 0) {\\n      return;\\n    }\\n    require(\\n      tokenBalanceOf[token][owner] >= amount,\\n      \\\"Multi/debitToken/insufficient\\\"\\n    );\\n    tokenBalanceOf[token][owner] -= amount;\\n    emit DebitUserTokenBalance(owner, token, amount);\\n  }\\n\\n  function redeemToken(\\n    address token,\\n    address receiver,\\n    uint amount\\n  ) external override returns (bool success) {\\n    require(msg.sender != address(this), \\\"Mutli/noReentrancy\\\");\\n    debitToken(token, msg.sender, amount);\\n    success = IEIP20(token).transfer(receiver, amount);\\n  }\\n\\n  function depositToken(address token, uint amount)\\n    external\\n    override\\n    returns (\\n      //override\\n      bool success\\n    )\\n  {\\n    uint balBefore = IEIP20(token).balanceOf(address(this));\\n    success = IEIP20(token).transferFrom(msg.sender, address(this), amount);\\n    require(\\n      IEIP20(token).balanceOf(address(this)) - balBefore == amount,\\n      \\\"Multi/transferFail\\\"\\n    );\\n    creditToken(token, msg.sender, amount);\\n  }\\n\\n  function addOwner(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    address owner\\n  ) internal {\\n    _offerOwners[outbound_tkn][inbound_tkn][offerId] = owner;\\n    emit NewOwnedOffer(outbound_tkn, inbound_tkn, offerId, owner);\\n  }\\n\\n  function ownerOf(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId\\n  ) public view override returns (address owner) {\\n    owner = _offerOwners[outbound_tkn][inbound_tkn][offerId];\\n    require(owner != address(0), \\\"multiUser/unkownOffer\\\");\\n  }\\n\\n  /// withdraws ETH from the bounty vault of the Mangrove.\\n  /// NB: `Mangrove.fund` function need not be called by `this` so is not included here.\\n  /// Warning: this function should not be called internally for msg.sender provision is being checked\\n  function withdrawFromMangrove(address payable receiver, uint amount)\\n    external\\n    override\\n    returns (bool noRevert)\\n  {\\n    require(msg.sender != address(this), \\\"Mutli/noReentrancy\\\");\\n    debitOnMgv(msg.sender, amount);\\n    return _withdrawFromMangrove(receiver, amount);\\n  }\\n\\n  function fundMangrove() external payable override // override\\n  {\\n    require(msg.sender != address(this), \\\"Mutli/noReentrancy\\\");\\n    fundMangroveInternal(msg.sender, msg.value);\\n  }\\n\\n  function fundMangroveInternal(address caller, uint provision) internal {\\n    // increasing the provision of `this` contract\\n    MGV.fund{value: provision}();\\n    // increasing the virtual provision of owner\\n    creditOnMgv(caller, provision);\\n  }\\n\\n  function updateUserBalanceOnMgv(address user, uint mgvBalanceBefore)\\n    internal\\n  {\\n    uint mgvBalanceAfter = MGV.balanceOf(address(this));\\n    if (mgvBalanceAfter == mgvBalanceBefore) {\\n      return;\\n    }\\n    if (mgvBalanceAfter > mgvBalanceBefore) {\\n      creditOnMgv(user, mgvBalanceAfter - mgvBalanceBefore);\\n    } else {\\n      debitOnMgv(user, mgvBalanceBefore - mgvBalanceAfter);\\n    }\\n  }\\n\\n  function newOffer(\\n    address outbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    address inbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    uint wants, // amount of `inbound_tkn` required for full delivery\\n    uint gives, // max amount of `outbound_tkn` promised by the offer\\n    uint gasreq, // max gas required by the offer when called. If maxUint256 is used here, default `OFR_GASREQ` will be considered instead\\n    uint gasprice, // gasprice that should be consider to compute the bounty (Mangrove's gasprice will be used if this value is lower)\\n    uint pivotId // identifier of an offer in the (`outbound_tkn,inbound_tkn`) Offer List after which the new offer should be inserted (gas cost of insertion will increase if the `pivotId` is far from the actual position of the new offer)\\n  ) external payable override returns (uint offerId) {\\n    require(msg.sender != address(this), \\\"Mutli/noReentrancy\\\");\\n    offerId = newOfferInternal(\\n      outbound_tkn,\\n      inbound_tkn,\\n      wants,\\n      gives,\\n      gasreq,\\n      gasprice,\\n      pivotId,\\n      msg.sender,\\n      msg.value\\n    );\\n  }\\n\\n  function newOfferInternal(\\n    address outbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    address inbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    uint wants, // amount of `inbound_tkn` required for full delivery\\n    uint gives, // max amount of `outbound_tkn` promised by the offer\\n    uint gasreq, // max gas required by the offer when called. If maxUint256 is used here, default `OFR_GASREQ` will be considered instead\\n    uint gasprice, // gasprice that should be consider to compute the bounty (Mangrove's gasprice will be used if this value is lower)\\n    uint pivotId,\\n    address caller,\\n    uint provision\\n  ) internal returns (uint) {\\n    uint weiBalanceBefore = MGV.balanceOf(address(this));\\n    if (gasreq > type(uint24).max) {\\n      gasreq = OFR_GASREQ;\\n    }\\n    // this call could revert if this contract does not have the provision to cover the bounty\\n    try\\n      MGV.newOffer{value: provision}(\\n        outbound_tkn,\\n        inbound_tkn,\\n        wants,\\n        gives,\\n        gasreq,\\n        gasprice,\\n        pivotId\\n      )\\n    returns (uint offerId) {\\n      //setting owner of offerId\\n      addOwner(outbound_tkn, inbound_tkn, offerId, caller);\\n      //updating wei balance of owner will revert if msg.sender does not have the funds\\n      updateUserBalanceOnMgv(caller, weiBalanceBefore);\\n      return offerId;\\n    } catch Error(string memory message) {\\n      if (msg.sender == address(MGV)) {\\n        // if `this` is executing a Mangrove trade do not throw by default\\n        return 0;\\n      } else {\\n        // if `this` is executing an offchain tx, throw\\n        revert(message);\\n      }\\n    }\\n  }\\n\\n  function updateOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId,\\n    uint offerId\\n  ) external payable override {\\n    updateOfferInternal(\\n      outbound_tkn,\\n      inbound_tkn,\\n      wants,\\n      gives,\\n      gasreq,\\n      gasprice,\\n      pivotId,\\n      offerId,\\n      msg.sender,\\n      msg.value\\n    );\\n  }\\n\\n  function updateOfferInternal(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId,\\n    uint offerId,\\n    address caller,\\n    uint provision // dangerous to use msg.value in a internal call\\n  ) internal returns (uint) {\\n    require(\\n      caller == ownerOf(outbound_tkn, inbound_tkn, offerId),\\n      \\\"Multi/updateOffer/unauthorized\\\"\\n    );\\n    uint weiBalanceBefore = MGV.balanceOf(address(this));\\n    if (gasreq > type(uint24).max) {\\n      gasreq = OFR_GASREQ;\\n    }\\n    try\\n      MGV.updateOffer{value: provision}(\\n        outbound_tkn,\\n        inbound_tkn,\\n        wants,\\n        gives,\\n        gasreq,\\n        gasprice,\\n        pivotId,\\n        offerId\\n      )\\n    {\\n      updateUserBalanceOnMgv(caller, weiBalanceBefore);\\n      return offerId;\\n    } catch Error(string memory message) {\\n      if (msg.sender == address(MGV)) {\\n        return 0;\\n      } else {\\n        revert(message);\\n      }\\n    }\\n  }\\n\\n  // Retracts `offerId` from the (`outbound_tkn`,`inbound_tkn`) Offer list of Mangrove. Function call will throw if `this` contract is not the owner of `offerId`.\\n  function retractOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    bool deprovision // if set to `true`, `this` contract will receive the remaining provision (in WEI) associated to `offerId`.\\n  ) external override returns (uint received) {\\n    received = retractOfferInternal(\\n      outbound_tkn,\\n      inbound_tkn,\\n      offerId,\\n      deprovision,\\n      msg.sender\\n    );\\n  }\\n\\n  function retractOfferInternal(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    bool deprovision,\\n    address caller\\n  ) internal returns (uint received) {\\n    require(\\n      _offerOwners[outbound_tkn][inbound_tkn][offerId] == caller,\\n      \\\"Multi/retractOffer/unauthorized\\\"\\n    );\\n    received = MGV.retractOffer(\\n      outbound_tkn,\\n      inbound_tkn,\\n      offerId,\\n      deprovision\\n    );\\n    if (received > 0) {\\n      creditOnMgv(caller, received);\\n    }\\n  }\\n\\n  function getMissingProvision(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint gasreq,\\n    uint gasprice,\\n    uint offerId\\n  ) public view override returns (uint) {\\n    uint balance;\\n    if (offerId != 0) {\\n      address owner = ownerOf(outbound_tkn, inbound_tkn, offerId);\\n      balance = mgvBalance[owner];\\n    }\\n    return\\n      _getMissingProvision(\\n        balance,\\n        outbound_tkn,\\n        inbound_tkn,\\n        gasreq,\\n        gasprice,\\n        offerId\\n      );\\n  }\\n\\n  // put received inbound tokens on offer owner account\\n  function __put__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    address owner = ownerOf(\\n      order.outbound_tkn,\\n      order.inbound_tkn,\\n      order.offerId\\n    );\\n    creditToken(order.inbound_tkn, owner, amount);\\n    return 0;\\n  }\\n\\n  // get outbound tokens from offer owner account\\n  function __get__(uint amount, ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n    returns (uint)\\n  {\\n    address owner = ownerOf(\\n      order.outbound_tkn,\\n      order.inbound_tkn,\\n      order.offerId\\n    );\\n    uint ownerBalance = tokenBalanceOf[order.outbound_tkn][owner];\\n    if (ownerBalance < amount) {\\n      debitToken(order.outbound_tkn, owner, ownerBalance);\\n      return (amount - ownerBalance);\\n    } else {\\n      debitToken(order.outbound_tkn, owner, amount);\\n      return 0;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x865d6617983a9b7ddb87e32afe5ac9006016bd29d4091aaf04a2a9842fd0fd0f\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/OfferLogics/MultiUsers/Persistent.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// Persistent.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport \\\"./MultiUser.sol\\\";\\n\\n//import \\\"hardhat/console.sol\\\";\\n\\n/// MangroveOffer is the basic building block to implement a reactive offer that interfaces with the Mangrove\\nabstract contract MultiUserPersistent is MultiUser {\\n  using P.Offer for P.Offer.t;\\n  using P.OfferDetail for P.OfferDetail.t;\\n\\n  function __residualWants__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint)\\n  {\\n    return order.offer.wants() - order.gives;\\n  }\\n\\n  function __residualGives__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    returns (uint)\\n  {\\n    return order.offer.gives() - order.wants;\\n  }\\n\\n  function __posthookSuccess__(ML.SingleOrder calldata order)\\n    internal\\n    virtual\\n    override\\n  {\\n    uint new_gives = __residualGives__(order);\\n    uint new_wants = __residualWants__(order);\\n    if (new_gives == 0) {\\n      // gas saving\\n      return;\\n    }\\n    try\\n      MGV.updateOffer(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        new_wants,\\n        new_gives,\\n        order.offerDetail.gasreq(),\\n        order.offerDetail.gasprice(),\\n        order.offer.next(),\\n        order.offerId\\n      )\\n    {} catch Error(string memory message) {\\n      // density could be too low, or offer provision be insufficient\\n      emit PosthookFail(\\n        order.outbound_tkn,\\n        order.inbound_tkn,\\n        order.offerId,\\n        message\\n      );\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7f044947db6171891422e9d8073e64beacda65cc31265d74192f99aed2eba519\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/interfaces/IEIP20.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n\\n// IERC20.sol\\n\\n// This is free and unencumbered software released into the public domain.\\n\\n// Anyone is free to copy, modify, publish, use, compile, sell, or distribute this software, either in source code form or as a compiled binary, for any purpose, commercial or non-commercial, and by any means.\\n\\n// In jurisdictions that recognize copyright laws, the author or authors of this software dedicate any and all copyright interest in the software to the public domain. We make this dedication for the benefit of the public at large and to the detriment of our heirs and successors. We intend this dedication to be an overt act of relinquishment in perpetuity of all present and future rights to this software under copyright law.\\n\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\n// For more information, please refer to <https://unlicense.org/>\\n\\n/* `MgvLib` contains data structures returned by external calls to Mangrove and the interfaces it uses for its own external calls. */\\n\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\ninterface IEIP20 {\\n  function totalSupply() external view returns (uint);\\n\\n  function balanceOf(address account) external view returns (uint);\\n\\n  function transfer(address recipient, uint amount) external returns (bool);\\n\\n  function allowance(address owner, address spender)\\n    external\\n    view\\n    returns (uint);\\n\\n  function approve(address spender, uint amount) external returns (bool);\\n\\n  function transferFrom(\\n    address sender,\\n    address recipient,\\n    uint amount\\n  ) external returns (bool);\\n\\n  function symbol() external view returns (string memory);\\n\\n  event Transfer(address indexed from, address indexed to, uint value);\\n  event Approval(address indexed owner, address indexed spender, uint value);\\n\\n  /// for wETH contract\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x3b0d162261f57baec15468d7a195a881e0f82c205998d9521812b96278de4f99\",\"license\":\"Unlicense\"},\"contracts/Strategies/interfaces/IMangrove.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// !! THIS FILE WAS AUTOGENERATED BY abi-to-sol v0.5.2. SEE SOURCE BELOW. !!\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\nimport {MgvLib as ML, P, IMaker} from \\\"../../MgvLib.sol\\\";\\n\\ninterface IMangrove {\\n  event Approval(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value\\n  );\\n  event Credit(address indexed maker, uint amount);\\n  event Debit(address indexed maker, uint amount);\\n  event Kill();\\n  event NewMgv();\\n  event OfferFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    address taker,\\n    uint takerWants,\\n    uint takerGives,\\n    bytes32 mgvData\\n  );\\n  event OfferRetract(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id\\n  );\\n  event OfferSuccess(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint id,\\n    address taker,\\n    uint takerWants,\\n    uint takerGives\\n  );\\n  event OfferWrite(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address maker,\\n    uint wants,\\n    uint gives,\\n    uint gasprice,\\n    uint gasreq,\\n    uint id,\\n    uint prev\\n  );\\n  event OrderComplete(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    address indexed taker,\\n    uint takerGot,\\n    uint takerGave,\\n    uint penalty\\n  );\\n  event OrderStart();\\n  event PosthookFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId\\n  );\\n  event SetActive(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    bool value\\n  );\\n  event SetDensity(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetFee(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint value\\n  );\\n  event SetGasbase(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offer_gasbase\\n  );\\n  event SetGasmax(uint value);\\n  event SetGasprice(uint value);\\n  event SetGovernance(address value);\\n  event SetMonitor(address value);\\n  event SetNotify(bool value);\\n  event SetUseOracle(bool value);\\n  event SetVault(address value);\\n\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  function PERMIT_TYPEHASH() external view returns (bytes32);\\n\\n  function activate(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fee,\\n    uint density,\\n    uint offer_gasbase\\n  ) external;\\n\\n  function allowances(\\n    address,\\n    address,\\n    address,\\n    address\\n  ) external view returns (uint);\\n\\n  function approve(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    address spender,\\n    uint value\\n  ) external returns (bool);\\n\\n  function balanceOf(address) external view returns (uint);\\n\\n  function best(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (uint);\\n\\n  function config(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (P.Global.t, P.Local.t);\\n\\n  function configInfo(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (P.GlobalStruct memory global, P.LocalStruct memory local);\\n\\n  function deactivate(address outbound_tkn, address inbound_tkn) external;\\n\\n  function flashloan(ML.SingleOrder memory sor, address taker)\\n    external\\n    returns (uint gasused);\\n\\n  function fund(address maker) external payable;\\n\\n  function fund() external payable;\\n\\n  function governance() external view returns (address);\\n\\n  function isLive(uint offer) external pure returns (bool);\\n\\n  function kill() external;\\n\\n  function locked(address outbound_tkn, address inbound_tkn)\\n    external\\n    view\\n    returns (bool);\\n\\n  function marketOrder(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint takerWants,\\n    uint takerGives,\\n    bool fillWants\\n  )\\n    external\\n    returns (\\n      uint,\\n      uint,\\n      uint\\n    );\\n\\n  function marketOrderFor(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint takerWants,\\n    uint takerGives,\\n    bool fillWants,\\n    address taker\\n  )\\n    external\\n    returns (\\n      uint takerGot,\\n      uint takerGave,\\n      uint bounty\\n    );\\n\\n  function newOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId\\n  ) external payable returns (uint);\\n\\n  function nonces(address) external view returns (uint);\\n\\n  function offerDetails(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.OfferDetail.t);\\n\\n  function offerInfo(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId\\n  )\\n    external\\n    view\\n    returns (\\n      P.OfferStruct memory offer,\\n      P.OfferDetailStruct memory offerDetail\\n    );\\n\\n  function offers(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.Offer.t);\\n\\n  function permit(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    address owner,\\n    address spender,\\n    uint value,\\n    uint deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  function retractOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    bool deprovision\\n  ) external returns (uint provision);\\n\\n  function setDensity(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint density\\n  ) external;\\n\\n  function setFee(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fee\\n  ) external;\\n\\n  function setGasbase(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offer_gasbase\\n  ) external;\\n\\n  function setGasmax(uint gasmax) external;\\n\\n  function setGasprice(uint gasprice) external;\\n\\n  function setGovernance(address governanceAddress) external;\\n\\n  function setMonitor(address monitor) external;\\n\\n  function setNotify(bool notify) external;\\n\\n  function setUseOracle(bool useOracle) external;\\n\\n  function setVault(address vaultAddress) external;\\n\\n  function snipes(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint[4][] memory targets,\\n    bool fillWants\\n  )\\n    external\\n    returns (\\n      uint,\\n      uint,\\n      uint,\\n      uint\\n    );\\n\\n  function snipesFor(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint[4][] memory targets,\\n    bool fillWants,\\n    address taker\\n  )\\n    external\\n    returns (\\n      uint successes,\\n      uint takerGot,\\n      uint takerGave,\\n      uint bounty\\n    );\\n\\n  function updateOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId,\\n    uint offerId\\n  ) external payable;\\n\\n  function vault() external view returns (address);\\n\\n  function withdraw(uint amount) external returns (bool noRevert);\\n\\n  receive() external payable;\\n}\\n\\n// THIS FILE WAS AUTOGENERATED FROM THE FOLLOWING ABI JSON:\\n/*\\n[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"governance\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"constructor\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Approval\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Credit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"Debit\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"Kill\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"NewMgv\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"mgvData\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"OfferFail\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferRetract\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferSuccess\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"prev\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OfferWrite\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"penalty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"OrderComplete\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[],\\\"name\\\":\\\"OrderStart\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"PosthookFail\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetActive\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetDensity\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetFee\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":true,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasbase\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasmax\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"SetGasprice\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetGovernance\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetMonitor\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetNotify\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"SetUseOracle\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"SetVault\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"DOMAIN_SEPARATOR\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"PERMIT_TYPEHASH\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"activate\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"allowances\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"approve\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"balanceOf\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"best\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"config\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"Global.t\\\",\\\"name\\\":\\\"_global\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Local.t\\\",\\\"name\\\":\\\"_local\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"configInfo\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"monitor\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"useOracle\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"notify\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"dead\\\",\\\"type\\\":\\\"bool\\\"}],\\\"internalType\\\":\\\"struct GlobalStruct\\\",\\\"name\\\":\\\"global\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"active\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"lock\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"best\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"last\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct LocalStruct\\\",\\\"name\\\":\\\"local\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"deactivate\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"OfferDetail.t\\\",\\\"name\\\":\\\"offerDetail\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Global.t\\\",\\\"name\\\":\\\"global\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"Local.t\\\",\\\"name\\\":\\\"local\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct MgvLib.SingleOrder\\\",\\\"name\\\":\\\"sor\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"flashloan\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasused\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"fund\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"fund\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"governance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"isLive\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"kill\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"locked\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"marketOrder\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerWants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"marketOrderFor\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"bounty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pivotId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"newOffer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"nonces\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerDetails\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"OfferDetail.t\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offerInfo\\\",\\\"outputs\\\":[{\\\"components\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"prev\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"next\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct OfferStruct\\\",\\\"name\\\":\\\"offer\\\",\\\"type\\\":\\\"tuple\\\"},{\\\"components\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"maker\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"internalType\\\":\\\"struct OfferDetailStruct\\\",\\\"name\\\":\\\"offerDetail\\\",\\\"type\\\":\\\"tuple\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"offers\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"Offer.t\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"owner\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"spender\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"value\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"deadline\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint8\\\",\\\"name\\\":\\\"v\\\",\\\"type\\\":\\\"uint8\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"r\\\",\\\"type\\\":\\\"bytes32\\\"},{\\\"internalType\\\":\\\"bytes32\\\",\\\"name\\\":\\\"s\\\",\\\"type\\\":\\\"bytes32\\\"}],\\\"name\\\":\\\"permit\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"deprovision\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"retractOffer\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"provision\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"density\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setDensity\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"fee\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setFee\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offer_gasbase\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasbase\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasmax\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasmax\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"setGasprice\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"governanceAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setGovernance\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"monitor\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setMonitor\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"notify\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setNotify\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"useOracle\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"setUseOracle\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"vaultAddress\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setVault\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[4][]\\\",\\\"name\\\":\\\"targets\\\",\\\"type\\\":\\\"uint256[4][]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"snipes\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256[4][]\\\",\\\"name\\\":\\\"targets\\\",\\\"type\\\":\\\"uint256[4][]\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"fillWants\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"taker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"snipesFor\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"successes\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGot\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"takerGave\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"bounty\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"outbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"inbound_tkn\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"wants\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gives\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasreq\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"gasprice\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"pivotId\\\",\\\"type\\\":\\\"uint256\\\"},{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"offerId\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"updateOffer\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"vault\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"name\\\":\\\"withdraw\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"noRevert\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"receive\\\"}]\\n*/\\n\",\"keccak256\":\"0xa99848a79215b9f6423232332c21e4540c7ec0d2b3213dbd892d0e2b63d86b16\",\"license\":\"UNLICENSED\"},\"contracts/Strategies/interfaces/IOfferLogic.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// SwingingMarketMaker.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity >=0.8.0;\\npragma abicoder v2;\\nimport \\\"./IMangrove.sol\\\";\\n\\ninterface IOfferLogic is IMaker {\\n  ///////////////////\\n  // MangroveOffer //\\n  ///////////////////\\n\\n  /** @notice Events */\\n\\n  // Logged whenever something went wrong during `makerPosthook` execution\\n  event PosthookFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId,\\n    string message\\n  );\\n\\n  // Logged whenever `__get__` hook failed to fetch the totality of the requested amount\\n  event GetFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId,\\n    uint missingAmount\\n  );\\n\\n  // Logged whenever `__put__` hook failed to deposit the totality of the requested amount\\n  event PutFail(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId,\\n    uint missingAmount\\n  );\\n\\n  // Logged whenever `__lastLook__` hook returned `false`\\n  event Reneged(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint offerId\\n  );\\n\\n  // Log incident during pre/post trade execution\\n  event LogIncident(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint indexed offerId,\\n    bytes error_data\\n  );\\n\\n  // Offer logic default gas required --value is used in update and new offer if maxUint is given\\n  function OFR_GASREQ() external returns (uint);\\n\\n  // returns missing provision on Mangrove, should `offerId` be reposted using `gasreq` and `gasprice` parameters\\n  // if `offerId` is not in the `outbound_tkn,inbound_tkn` offer list, the totality of the necessary provision is returned\\n  function getMissingProvision(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint gasreq,\\n    uint gasprice,\\n    uint offerId\\n  ) external view returns (uint);\\n\\n  // Changing OFR_GASREQ of the logic\\n  function setGasreq(uint gasreq) external;\\n\\n  function redeemToken(\\n    address token,\\n    address receiver,\\n    uint amount\\n  ) external returns (bool success);\\n\\n  function approveMangrove(address outbound_tkn, uint amount) external;\\n\\n  function withdrawFromMangrove(address payable receiver, uint amount)\\n    external\\n    returns (bool noRevert);\\n\\n  function newOffer(\\n    address outbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    address inbound_tkn, // address of the ERC20 contract managing outbound tokens\\n    uint wants, // amount of `inbound_tkn` required for full delivery\\n    uint gives, // max amount of `outbound_tkn` promised by the offer\\n    uint gasreq, // max gas required by the offer when called. If maxUint256 is used here, default `OFR_GASREQ` will be considered instead\\n    uint gasprice, // gasprice that should be consider to compute the bounty (Mangrove's gasprice will be used if this value is lower)\\n    uint pivotId // identifier of an offer in the (`outbound_tkn,inbound_tkn`) Offer List after which the new offer should be inserted (gas cost of insertion will increase if the `pivotId` is far from the actual position of the new offer)\\n  ) external payable returns (uint offerId);\\n\\n  function updateOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint wants,\\n    uint gives,\\n    uint gasreq,\\n    uint gasprice,\\n    uint pivotId,\\n    uint offerId\\n  ) external payable; //returns 0 if updateOffer failed (for instance if offer is underprovisioned) otherwise returns `offerId`\\n\\n  function retractOffer(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId,\\n    bool deprovision // if set to `true`, `this` contract will receive the remaining provision (in WEI) associated to `offerId`.\\n  ) external returns (uint received);\\n}\\n\",\"keccak256\":\"0x57927cd1c77f59cee8d73d652709b08036d8e56a78db2070f7aa9730ecd47337\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/interfaces/IOfferLogicMulti.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// IOfferLogicMulti.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\nimport \\\"./IOfferLogic.sol\\\";\\n\\ninterface IOfferLogicMulti is IOfferLogic {\\n  /** Multi offer specific Events */\\n  // Offer management\\n  event NewOwnedOffer(\\n    address indexed outbound_tkn,\\n    address indexed inbound_tkn,\\n    uint indexed offerId,\\n    address owner\\n  );\\n\\n  // user provision on Mangrove has increased\\n  event CreditMgvUser(address indexed user, uint amount);\\n\\n  // user provision on Mangrove has decreased\\n  event DebitMgvUser(address indexed user, uint amount);\\n\\n  // user token balance on contract has increased\\n  event CreditUserTokenBalance(\\n    address indexed user,\\n    address indexed token,\\n    uint amount\\n  );\\n\\n  // user token balance on contract has decreased\\n  event DebitUserTokenBalance(\\n    address indexed user,\\n    address indexed token,\\n    uint amount\\n  );\\n\\n  function tokenBalance(address token) external view returns (uint);\\n\\n  function balanceOnMangrove() external view returns (uint);\\n\\n  function offerOwners(\\n    address reader,\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fromId,\\n    uint maxOffers\\n  )\\n    external\\n    view\\n    returns (\\n      uint nextId,\\n      uint[] memory offerIds,\\n      address[] memory __offerOwners\\n    );\\n\\n  function ownerOf(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint offerId\\n  ) external view returns (address owner);\\n\\n  function depositToken(address token, uint amount)\\n    external\\n    returns (\\n      //override\\n      bool success\\n    );\\n\\n  function fundMangrove() external payable;\\n}\\n\",\"keccak256\":\"0x1bd1abc36723bf252e6ee0cb8509876108e799efd301454541cdd1a14e498ce3\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/interfaces/aave/V3/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\nimport {IPoolAddressesProvider} from \\\"./IPoolAddressesProvider.sol\\\";\\nimport {DataTypes} from \\\"../../../lib/aave/V3/DataTypes.sol\\\";\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n **/\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   **/\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   **/\\n  event BackUnbacked(\\n    address indexed reserve,\\n    address indexed backer,\\n    uint amount,\\n    uint fee\\n  );\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   **/\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed to,\\n    uint amount\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   **/\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(\\n    address indexed reserve,\\n    address indexed user\\n  );\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint debtToCover,\\n    uint liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint liquidityRate,\\n    uint stableBorrowRate,\\n    uint variableBorrowRate,\\n    uint liquidityIndex,\\n    uint variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   **/\\n  event MintedToTreasury(address indexed reserve, uint amountMinted);\\n\\n  /**\\n   * @dev Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function mintUnbacked(\\n    address asset,\\n    uint amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   **/\\n  function backUnbacked(\\n    address asset,\\n    uint amount,\\n    uint fee\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function supply(\\n    address asset,\\n    uint amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   **/\\n  function supplyWithPermit(\\n    address asset,\\n    uint amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint amount,\\n    address to\\n  ) external returns (uint);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint amount,\\n    uint interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint amount,\\n    uint interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   **/\\n  function repayWithPermit(\\n    address asset,\\n    uint amount,\\n    uint interestRateMode,\\n    address onBehalfOf,\\n    uint deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   **/\\n  function repayWithATokens(\\n    address asset,\\n    uint amount,\\n    uint interestRateMode\\n  ) external returns (uint);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   **/\\n  function swapBorrowRateMode(address asset, uint interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\\n    external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint[] calldata amounts,\\n    uint[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint totalCollateralBase,\\n      uint totalDebtBase,\\n      uint availableBorrowsBase,\\n      uint currentLiquidationThreshold,\\n      uint ltv,\\n      uint healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   **/\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   **/\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   **/\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset)\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset)\\n    external\\n    view\\n    returns (uint);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   **/\\n  function getReserveData(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint amount,\\n    uint balanceFromBefore,\\n    uint balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   **/\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   **/\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   **/\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(\\n    uint8 id,\\n    DataTypes.EModeCategory memory config\\n  ) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id)\\n    external\\n    view\\n    returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   **/\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\",\"keccak256\":\"0x5ed897513e660a979e02d414031eac8234250f3df0698a5d18faad1e29697c84\",\"license\":\"AGPL-3.0\"},\"contracts/Strategies/interfaces/aave/V3/IPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n **/\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(\\n    bytes32 indexed id,\\n    address indexed oldAddress,\\n    address indexed newAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   **/\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   **/\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   **/\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   **/\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   **/\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   **/\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   **/\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   **/\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\",\"keccak256\":\"0x1ed49232a8dae2b18f714d459ce0d182ca6b84573556ec138fe93acf10eb9432\",\"license\":\"AGPL-3.0\"},\"contracts/Strategies/interfaces/aave/V3/IPriceOracleGetter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n **/\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   **/\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   **/\\n  function BASE_CURRENCY_UNIT() external view returns (uint);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   **/\\n  function getAssetPrice(address asset) external view returns (uint);\\n}\\n\",\"keccak256\":\"0x998c1452a4a4499d4253477e3f8287714da2b3057bb21f4540ea0c0f1feb093b\",\"license\":\"AGPL-3.0\"},\"contracts/Strategies/lib/AccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier:\\tBSD-2-Clause\\n\\n// AccessedControlled.sol\\n\\n// Copyright (c) 2021 Giry SAS. All rights reserved.\\n\\n// Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\\n\\n// 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\\n// 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\n\\ncontract AccessControlled {\\n  address public admin;\\n\\n  constructor() {\\n    admin = msg.sender;\\n  }\\n\\n  modifier onlyCaller(address caller) {\\n    require(\\n      caller == address(0) || msg.sender == caller,\\n      \\\"AccessControlled/Invalid\\\"\\n    );\\n    _;\\n  }\\n\\n  modifier onlyAdmin() {\\n    require(msg.sender == admin, \\\"AccessControlled/Invalid\\\");\\n    _;\\n  }\\n\\n  function setAdmin(address _admin) external onlyAdmin {\\n    admin = _admin;\\n  }\\n}\\n\",\"keccak256\":\"0x9f9023603245abc75bc344988d149e5bc3ea21358b8545228db8a92b0c076446\",\"license\":\"BSD-2-Clause\"},\"contracts/Strategies/lib/aave/V3/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint currScaledVariableDebt;\\n    uint nextScaledVariableDebt;\\n    uint currPrincipalStableDebt;\\n    uint currAvgStableBorrowRate;\\n    uint currTotalStableDebt;\\n    uint nextAvgStableBorrowRate;\\n    uint nextTotalStableDebt;\\n    uint currLiquidityIndex;\\n    uint nextLiquidityIndex;\\n    uint currVariableBorrowIndex;\\n    uint nextVariableBorrowIndex;\\n    uint currLiquidityRate;\\n    uint currVariableBorrowRate;\\n    uint reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint reservesCount;\\n    uint debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint maxStableRateBorrowSizePercent;\\n    uint reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint amount;\\n    address to;\\n    uint reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint amount;\\n    uint balanceFromBefore;\\n    uint balanceToBefore;\\n    uint reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint[] amounts;\\n    uint[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint flashLoanPremiumToProtocol;\\n    uint flashLoanPremiumTotal;\\n    uint maxStableRateBorrowSizePercent;\\n    uint reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint flashLoanPremiumToProtocol;\\n    uint flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint amount;\\n    uint totalPremium;\\n    uint flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint amount;\\n    InterestRateMode interestRateMode;\\n    uint maxStableLoanPercent;\\n    uint reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint totalDebt;\\n    uint healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint unbacked;\\n    uint liquidityAdded;\\n    uint liquidityTaken;\\n    uint totalStableDebt;\\n    uint totalVariableDebt;\\n    uint averageStableBorrowRate;\\n    uint reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\",\"keccak256\":\"0xc8590a2afbe9702d9b4e1d0a56978525d8de6e71a0ae4f5c0743501ed59f8c8f\",\"license\":\"BUSL-1.1\"},\"contracts/Strategies/lib/aave/V3/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = \\\"1\\\"; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = \\\"2\\\"; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = \\\"3\\\"; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = \\\"4\\\"; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = \\\"5\\\"; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = \\\"6\\\"; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = \\\"7\\\"; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = \\\"8\\\"; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = \\\"9\\\"; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = \\\"10\\\"; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = \\\"11\\\"; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = \\\"12\\\"; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = \\\"13\\\"; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = \\\"14\\\"; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = \\\"15\\\"; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = \\\"16\\\"; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = \\\"17\\\"; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = \\\"18\\\"; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = \\\"19\\\"; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = \\\"20\\\"; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = \\\"21\\\"; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = \\\"22\\\"; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = \\\"23\\\"; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = \\\"24\\\"; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = \\\"25\\\"; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = \\\"26\\\"; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = \\\"27\\\"; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = \\\"28\\\"; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = \\\"29\\\"; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = \\\"30\\\"; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = \\\"31\\\"; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = \\\"32\\\"; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = \\\"33\\\"; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = \\\"34\\\"; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = \\\"35\\\"; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = \\\"36\\\"; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = \\\"37\\\"; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = \\\"38\\\"; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = \\\"39\\\"; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = \\\"40\\\"; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = \\\"41\\\"; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = \\\"42\\\"; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = \\\"43\\\"; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = \\\"44\\\"; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = \\\"45\\\"; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = \\\"46\\\"; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = \\\"47\\\"; // 'User did not borrow the specified currency'\\n  string public constant SAME_BLOCK_BORROW_REPAY = \\\"48\\\"; // 'Borrow and repay in same block is not allowed'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = \\\"49\\\"; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = \\\"50\\\"; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = \\\"51\\\"; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = \\\"52\\\"; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = \\\"53\\\"; // 'Debt ceiling is exceeded'\\n  string public constant ATOKEN_SUPPLY_NOT_ZERO = \\\"54\\\"; // 'AToken supply is not zero'\\n  string public constant STABLE_DEBT_NOT_ZERO = \\\"55\\\"; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = \\\"56\\\"; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = \\\"57\\\"; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = \\\"58\\\"; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = \\\"59\\\"; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = \\\"60\\\"; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = \\\"61\\\"; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = \\\"62\\\"; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = \\\"63\\\"; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = \\\"64\\\"; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = \\\"65\\\"; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = \\\"66\\\"; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = \\\"67\\\"; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = \\\"68\\\"; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = \\\"69\\\"; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = \\\"70\\\"; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = \\\"71\\\"; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = \\\"72\\\"; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = \\\"73\\\"; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = \\\"74\\\"; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = \\\"75\\\"; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = \\\"76\\\"; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = \\\"77\\\"; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = \\\"78\\\"; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = \\\"79\\\"; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = \\\"80\\\"; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = \\\"81\\\"; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = \\\"82\\\"; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = \\\"83\\\"; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = \\\"84\\\"; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = \\\"85\\\"; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = \\\"86\\\"; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = \\\"87\\\"; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = \\\"88\\\"; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = \\\"89\\\"; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = \\\"90\\\"; // the total debt of the reserve needs to be 0\\n}\\n\",\"keccak256\":\"0xed48069b64e4fccca6732e5854d8b35c97448299135f5ae183e643c05bea9c40\",\"license\":\"BUSL-1.1\"},\"contracts/Strategies/lib/aave/V3/ReserveConfiguration.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.10;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\nimport {DataTypes} from \\\"./DataTypes.sol\\\";\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  /// @dev bit 63 reserved\\n\\n  uint internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint internal constant MAX_VALID_LTV = 65535;\\n  uint internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint internal constant MAX_VALID_DECIMALS = 255;\\n  uint internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   **/\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint ltv)\\n    internal\\n    pure\\n  {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   **/\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   **/\\n  function setLiquidationThreshold(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint threshold\\n  ) internal pure {\\n    require(\\n      threshold <= MAX_VALID_LIQUIDATION_THRESHOLD,\\n      Errors.INVALID_LIQ_THRESHOLD\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   **/\\n  function getLiquidationThreshold(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint) {\\n    return\\n      (self.data & ~LIQUIDATION_THRESHOLD_MASK) >>\\n      LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   **/\\n  function setLiquidationBonus(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint bonus\\n  ) internal pure {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   **/\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_BONUS_MASK) >>\\n      LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   **/\\n  function setDecimals(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint decimals\\n  ) internal pure {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data =\\n      (self.data & DECIMALS_MASK) |\\n      (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   **/\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   **/\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   **/\\n  function getActive(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   **/\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   **/\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   **/\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   **/\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   **/\\n  function setBorrowableInIsolation(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool borrowable\\n  ) internal pure {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   **/\\n  function getBorrowableInIsolation(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   **/\\n  function setSiloedBorrowing(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool siloed\\n  ) internal pure {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   **/\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   **/\\n  function setBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   **/\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   **/\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   **/\\n  function getStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (bool) {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   **/\\n  function setReserveFactor(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint reserveFactor\\n  ) internal pure {\\n    require(\\n      reserveFactor <= MAX_VALID_RESERVE_FACTOR,\\n      Errors.INVALID_RESERVE_FACTOR\\n    );\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   **/\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return\\n      (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   **/\\n  function setBorrowCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint borrowCap\\n  ) internal pure {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data =\\n      (self.data & BORROW_CAP_MASK) |\\n      (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   **/\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   **/\\n  function setSupplyCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint supplyCap\\n  ) internal pure {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data =\\n      (self.data & SUPPLY_CAP_MASK) |\\n      (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   **/\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   **/\\n  function setDebtCeiling(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint ceiling\\n  ) internal pure {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data =\\n      (self.data & DEBT_CEILING_MASK) |\\n      (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   **/\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   **/\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   **/\\n  function getLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self\\n  ) internal pure returns (uint) {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >>\\n      LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   **/\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint unbackedMintCap\\n  ) internal pure {\\n    require(\\n      unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP,\\n      Errors.INVALID_UNBACKED_MINT_CAP\\n    );\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   **/\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return\\n      (self.data & ~UNBACKED_MINT_CAP_MASK) >>\\n      UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   **/\\n  function setEModeCategory(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint category\\n  ) internal pure {\\n    require(\\n      category <= MAX_VALID_EMODE_CATEGORY,\\n      Errors.INVALID_EMODE_CATEGORY\\n    );\\n\\n    self.data =\\n      (self.data & EMODE_CATEGORY_MASK) |\\n      (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   **/\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint)\\n  {\\n    return\\n      (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   **/\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   **/\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint,\\n      uint,\\n      uint,\\n      uint,\\n      uint,\\n      uint\\n    )\\n  {\\n    uint dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >>\\n        LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >>\\n        LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   **/\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint, uint)\\n  {\\n    uint dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\",\"keccak256\":\"0xe156024a4d5d33364cbab526a2edbf2371f572e85807eb199dbd464bcbca4af2\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/MgvReader.sol\":{\"content\":\"// SPDX-License-Identifier:\\tAGPL-3.0\\n\\n// MgvReader.sol\\n\\n// Copyright (C) 2021 Giry SAS.\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published\\n// by the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity ^0.8.10;\\npragma abicoder v2;\\nimport {MgvLib as ML, P} from \\\"../MgvLib.sol\\\";\\n\\ninterface MangroveLike {\\n  function best(address, address) external view returns (uint);\\n\\n  function offers(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.Offer.t);\\n\\n  function offerDetails(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.OfferDetail.t);\\n\\n  function offerInfo(\\n    address,\\n    address,\\n    uint\\n  ) external view returns (P.OfferStruct memory, P.OfferDetailStruct memory);\\n\\n  function config(address, address) external view returns (P.Global.t, P.Local.t);\\n}\\n\\ncontract MgvReader {\\n  using P.Offer for P.Offer.t;\\n  using P.Global for P.Global.t;\\n  using P.Local for P.Local.t;\\n  MangroveLike immutable mgv;\\n\\n  constructor(address _mgv) {\\n    mgv = MangroveLike(payable(_mgv));\\n  }\\n\\n  /*\\n   * Returns two uints.\\n   *\\n   * `startId` is the id of the best live offer with id equal or greater than\\n   * `fromId`, 0 if there is no such offer.\\n   *\\n   * `length` is 0 if `startId == 0`. Other it is the number of live offers as good or worse than the offer with\\n   * id `startId`.\\n   */\\n  function offerListEndPoints(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fromId,\\n    uint maxOffers\\n  ) public view returns (uint startId, uint length) { unchecked {\\n    if (fromId == 0) {\\n      startId = mgv.best(outbound_tkn, inbound_tkn);\\n    } else {\\n      startId = mgv.offers(outbound_tkn, inbound_tkn, fromId).gives()\\n      > 0\\n        ? fromId\\n        : 0;\\n    }\\n\\n    uint currentId = startId;\\n\\n    while (currentId != 0 && length < maxOffers) {\\n      currentId = mgv.offers(outbound_tkn, inbound_tkn, currentId).next();\\n      length = length + 1;\\n    }\\n\\n    return (startId, length);\\n  }}\\n\\n  // Returns the orderbook for the outbound_tkn/inbound_tkn pair in packed form. First number is id of next offer (0 is we're done). First array is ids, second is offers (as bytes32), third is offerDetails (as bytes32). Array will be of size `min(# of offers in out/in list, maxOffers)`.\\n  function packedOfferList(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fromId,\\n    uint maxOffers\\n  )\\n    public\\n    view\\n    returns (\\n      uint,\\n      uint[] memory,\\n      P.Offer.t[] memory,\\n      P.OfferDetail.t[] memory\\n    )\\n  { unchecked {\\n    (uint currentId, uint length) = offerListEndPoints(\\n      outbound_tkn,\\n      inbound_tkn,\\n      fromId,\\n      maxOffers\\n    );\\n\\n    uint[] memory offerIds = new uint[](length);\\n    P.Offer.t[] memory offers = new P.Offer.t[](length);\\n    P.OfferDetail.t[] memory details = new P.OfferDetail.t[](length);\\n\\n    uint i = 0;\\n\\n    while (currentId != 0 && i < length) {\\n      offerIds[i] = currentId;\\n      offers[i] = mgv.offers(outbound_tkn, inbound_tkn, currentId);\\n      details[i] = mgv.offerDetails(outbound_tkn, inbound_tkn, currentId);\\n      currentId = offers[i].next();\\n      i = i + 1;\\n    }\\n\\n    return (currentId, offerIds, offers, details);\\n  }}\\n  // Returns the orderbook for the outbound_tkn/inbound_tkn pair in unpacked form. First number is id of next offer (0 if we're done). First array is ids, second is offers (as structs), third is offerDetails (as structs). Array will be of size `min(# of offers in out/in list, maxOffers)`.\\n  function offerList(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint fromId,\\n    uint maxOffers\\n  )\\n    public\\n    view\\n    returns (\\n      uint,\\n      uint[] memory,\\n      P.OfferStruct[] memory,\\n      P.OfferDetailStruct[] memory\\n    )\\n  { unchecked {\\n    (uint currentId, uint length) = offerListEndPoints(\\n      outbound_tkn,\\n      inbound_tkn,\\n      fromId,\\n      maxOffers\\n    );\\n\\n    uint[] memory offerIds = new uint[](length);\\n    P.OfferStruct[] memory offers = new P.OfferStruct[](length);\\n    P.OfferDetailStruct[] memory details = new P.OfferDetailStruct[](length);\\n\\n    uint i = 0;\\n    while (currentId != 0 && i < length) {\\n      offerIds[i] = currentId;\\n      (offers[i], details[i]) = mgv.offerInfo(\\n        outbound_tkn,\\n        inbound_tkn,\\n        currentId\\n      );\\n      currentId = offers[i].next;\\n      i = i + 1;\\n    }\\n\\n    return (currentId, offerIds, offers, details);\\n  }}\\n\\n  function getProvision(\\n    address outbound_tkn,\\n    address inbound_tkn,\\n    uint ofr_gasreq,\\n    uint ofr_gasprice\\n  ) external view returns (uint) { unchecked {\\n    (P.Global.t global, P.Local.t local) = mgv.config(outbound_tkn, inbound_tkn);\\n    uint _gp;\\n    uint global_gasprice = global.gasprice();\\n    if (global_gasprice > ofr_gasprice) {\\n      _gp = global_gasprice;\\n    } else {\\n      _gp = ofr_gasprice;\\n    }\\n    return\\n      (ofr_gasreq + local.offer_gasbase()) *\\n      _gp *\\n      10**9;\\n  }}\\n}\\n\",\"keccak256\":\"0xc9d736c8818e71607db0aad34bdfef79cf3b1dbd7ae019f466b9a8bb237c2e95\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x6101406040527f4d616e67726f76654f666665722f72656e6567656400000000000000000000006080527f4d616e67726f76654f666665722f7075744661696c757265000000000000000060a0527f4d616e67726f76654f666665722f6f75744f664c69717569646974790000000060c052620186a06001553480156200008557600080fd5b506040516200478038038062004780833981016040819052620000a8916200039f565b600080546001600160a01b031916331781556001600160a01b03821660e0528290620000d8565b60405180910390fd5b6005805461ffff811661ffff199091161790556040516321f8a72160e01b81526b50524943455f4f5241434c4560a01b60048201526000906001600160a01b038416906321f8a72190602401602060405180830381865afa15801562000142573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001689190620003de565b90506000836001600160a01b031663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001ab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d19190620003de565b90506001600160a01b0381166200022b5760405162461bcd60e51b815260206004820152601b60248201527f496e76616c6964206c656e64696e67506f6f6c206164647265737300000000006044820152606401620000cf565b6001600160a01b038216620002835760405162461bcd60e51b815260206004820152601b60248201527f496e76616c69642070726963654f7261636c65206164647265737300000000006044820152606401620000cf565b6001600160a01b0390811661010052166101205250620002a89050620c3500620002b0565b505062000405565b6000546001600160a01b0316331480620002dd575060e0516001600160a01b0316336001600160a01b0316145b6200032b5760405162461bcd60e51b815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401620000cf565b808162ffffff1614620003815760405162461bcd60e51b815260206004820152601d60248201527f4d616e67726f76654f666665722f6761737265712f6f766572666c6f770000006044820152606401620000cf565b600155565b6001600160a01b03811681146200039c57600080fd5b50565b60008060408385031215620003b357600080fd5b8251620003c08162000386565b6020840151909250620003d38162000386565b809150509250929050565b600060208284031215620003f157600080fd5b8151620003fe8162000386565b9392505050565b60805160a05160c05160e051610100516101205161427f62000501600039600081816102e30152610b61015260008181610435015281816107da0152818161090e015281816109e2015281816115c80152818161306e01526132d801526000818161040101528181610f900152818161108d0152818161125c0152818161169901528181611be601528181611fdb015281816120c901528181612192015281816123010152818161240b015281816124a701528181612613015281816126e6015281816127af015281816128fc015281816129c00152612c610152600081816111880152611492015260006113c201526000505061427f6000f3fe6080604052600436106101b05760003560e01c8063704b6c02116100ec578063df2426671161008a578063eedc966a11610064578063eedc966a14610549578063f851a44014610597578063f92495e5146105c4578063faa030ec146105e457600080fd5b8063df242667146104e6578063e428204d14610513578063e4c34f841461052957600080fd5b8063a903f25c116100c6578063a903f25c14610457578063ad97db1b14610477578063aefe840314610497578063d1971159146104b757600080fd5b8063704b6c02146103cf57806399fa5e2d146103ef578063a59a99731461042357600080fd5b8063338b5dea11610159578063458eda9a11610133578063458eda9a1461036757806349f6d2dc146103895780636a4f76911461039c5780636c49c32c146103af57600080fd5b8063338b5dea1461030557806334bd8931146103255780633d3d130d1461034757600080fd5b80631bea80061161018a5780631bea8006146102565780632197c31e1461029c5780632630c12f146102d157600080fd5b8063063df2d2146101bc5780630d71bdc3146101f15780630efc8fd21461021157600080fd5b366101b757005b600080fd5b3480156101c857600080fd5b506101dc6101d73660046134bf565b6105ec565b60405190151581526020015b60405180910390f35b3480156101fd57600080fd5b506101dc61020c3660046134eb565b61067a565b34801561021d57600080fd5b5061023161022c36600461352c565b610792565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e8565b34801561026257600080fd5b5061028e610271366004613549565b600460209081526000928352604080842090915290825290205481565b6040519081526020016101e8565b3480156102a857600080fd5b506102bc6102b7366004613590565b610853565b604080519283526020830191909152016101e8565b3480156102dd57600080fd5b506102317f000000000000000000000000000000000000000000000000000000000000000081565b34801561031157600080fd5b506101dc6103203660046134bf565b610d0c565b34801561033157600080fd5b506103456103403660046135db565b610f57565b005b34801561035357600080fd5b50610345610362366004613607565b61108b565b34801561037357600080fd5b503360009081526003602052604090205461028e565b61028e610397366004613667565b6111b2565b6103456103aa3660046136c9565b61123b565b3480156103bb57600080fd5b5061028e6103ca366004613734565b611258565b3480156103db57600080fd5b506103456103ea36600461352c565b6114c3565b3480156103fb57600080fd5b506102317f000000000000000000000000000000000000000000000000000000000000000081565b34801561042f57600080fd5b506102317f000000000000000000000000000000000000000000000000000000000000000081565b34801561046357600080fd5b506103456104723660046134bf565b61158b565b34801561048357600080fd5b5061028e610492366004613751565b611644565b3480156104a357600080fd5b506103456104b23660046134bf565b61165c565b3480156104c357600080fd5b506104d76104d23660046137a4565b61177f565b6040516101e8939291906137ff565b3480156104f257600080fd5b5061028e61050136600461352c565b60036020526000908152604090205481565b34801561051f57600080fd5b5061028e60015481565b34801561053557600080fd5b5061028e61054436600461389b565b611922565b34801561055557600080fd5b5061028e61056436600461352c565b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020908152604080832033845290915290205490565b3480156105a357600080fd5b506000546102319073ffffffffffffffffffffffffffffffffffffffff1681565b3480156105d057600080fd5b506102316105df3660046134eb565b61197a565b610345611a25565b60003330141561065d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d75746c692f6e6f5265656e7472616e6379000000000000000000000000000060448201526064015b60405180910390fd5b6106673383611a9b565b6106718383611bb4565b90505b92915050565b6000333014156106e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d75746c692f6e6f5265656e7472616e637900000000000000000000000000006044820152606401610654565b6106f1843384611d80565b6040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526024820184905285169063a9059cbb906044016020604051808303816000875af1158015610766573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078a91906138ec565b949350505050565b6040517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108489190613a6c565b610100015192915050565b6000806108816040518060800160405280600081526020016000815260200160008152602001600081525090565b6108c960405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fbf92857c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063bf92857c9060240160c060405180830381865afa158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190613b8f565b60c0870152608086015260a08501526040808501919091526020840191909152908252517f35ea6a7500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301526000917f0000000000000000000000000000000000000000000000000000000000000000909116906335ea6a75906024016101e060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190613a6c565b80515160ff603082901c1660408681019190915261ffff601083901c81166020808901919091529216865261010083015181517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b8116600483015292519495509116926370a08231926024808401939192918290030181865afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190613bd9565b60e08301526040517fb3596f0700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063b3596f0790602401602060405180830381865afa158015610ba8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcc9190613bd9565b60608401526020820151825160a084015161271091610bea91613c21565b610bf49190613c5e565b610bfe9190613c99565b6060808401919091528301516020840151600091610c1b91613c21565b6040850151610c2b90600a613dd0565b8460600151610c3a9190613c21565b610c4690612710613c21565b610c509190613c5e565b90508260e001518110610c67578260e00151610c69565b805b905087610c7f57945060009350610d0492505050565b835160009061271090610c929084613c21565b610c9c9190613c5e565b9050600085606001518660400151600a610cb69190613dd0565b8660400151610cc59190613c21565b610ccf9190613c5e565b905080821115610ceb5782600097509750505050505050610d04565b6000610cf78383613c99565b9398509296505050505050505b935093915050565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190613bd9565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810185905290915073ffffffffffffffffffffffffffffffffffffffff8516906323b872dd906064016020604051808303816000875af1158015610e1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3f91906138ec565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529092508390829073ffffffffffffffffffffffffffffffffffffffff8716906370a0823190602401602060405180830381865afa158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed49190613bd9565b610ede9190613c99565b14610f45576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d756c74692f7472616e736665724661696c00000000000000000000000000006044820152606401610654565b610f50843385611edd565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff16331480610fb257503373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016145b611018576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401610654565b808162ffffff1614611086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4d616e67726f76654f666665722f6761737265712f6f766572666c6f770000006044820152606401610654565b600155565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811615806110e457503373ffffffffffffffffffffffffffffffffffffffff8216145b61114a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401610654565b81602001357f6d67762f7472616465537563636573730000000000000000000000000000000014156111845761117f83611f87565b505050565b81357f0000000000000000000000000000000000000000000000000000000000000000141561117f57505050565b60003330141561121e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d75746c692f6e6f5265656e7472616e637900000000000000000000000000006044820152606401610654565b61122f888888888888883334611f93565b98975050505050505050565b61124d8888888888888888333461222f565b505050505050505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff811615806112b357503373ffffffffffffffffffffffffffffffffffffffff8216145b611319576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401610654565b60006113298460a00135856124f5565b905080156113e957611341604085016020860161352c565b73ffffffffffffffffffffffffffffffffffffffff16611364602086018661352c565b73ffffffffffffffffffffffffffffffffffffffff167f3482722a7c71a098521214cdb975e1d9faa0b0163f768e89566f7acc36cffd0b8660400135846040516113b8929190918252602082015260400190565b60405180910390a37f00000000000000000000000000000000000000000000000000000000000000009250506114bd565b60006113f9856080013586612501565b905080156114ba57611411604086016020870161352c565b73ffffffffffffffffffffffffffffffffffffffff16611434602087018761352c565b73ffffffffffffffffffffffffffffffffffffffff167fc99fe658c80b903af0e1270f4a55564b3a7509294ab1052c6ab07f8198baea67876040013584604051611488929190918252602082015260400190565b60405180910390a37f0000000000000000000000000000000000000000000000000000000000000000935050506114bd565b50505b50919050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f416363657373436f6e74726f6c6c65642f496e76616c696400000000000000006044820152606401610654565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af1158015611620573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f91906138ec565b6000611653858585853361250d565b95945050505050565b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905283169063095ea7b3906044016020604051808303816000875af11580156116f1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171591906138ec565b61177b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d67764f666665722f617070726f76652f4661696c00000000000000000000006044820152606401610654565b5050565b6040517f2c7e545f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015284811660248301526044820184905260648201839052600091606091829190891690632c7e545f90608401600060405180830381865afa15801561180a573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526118509190810190613f55565b50508051919450925067ffffffffffffffff81111561187157611871613909565b60405190808252806020026020018201604052801561189a578160200160208202803683370190505b50905060005b8251811015611916576118cd88888584815181106118c0576118c061404a565b602002602001015161197a565b8282815181106118df576118df61404a565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061190e81614079565b9150506118a0565b50955095509592505050565b600080821561196157600061193888888661197a565b73ffffffffffffffffffffffffffffffffffffffff166000908152600360205260409020549150505b61196f818888888888612692565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff8084166000908152600260209081526040808320868516845282528083208584529091529020541680611a1e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f6d756c7469557365722f756e6b6f776e4f6666657200000000000000000000006044820152606401610654565b9392505050565b33301415611a8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4d75746c692f6e6f5265656e7472616e637900000000000000000000000000006044820152606401610654565b611a9933346128fa565b565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054811115611b2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4d756c74692f64656269744f6e4d67762f696e73756666696369656e740000006044820152606401610654565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054839290611b5f908490613c99565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316907fd50b865b3d9d927f026d3b8404e07f25d6beb1d111deab51bdc846bf8d0a860b906020015b60405180910390a25050565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018290526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d906024016020604051808303816000875af1158015611c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c6891906138ec565b611cf4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f4d616e67726f76654f666665722f77697468647261772f7472616e736665724660448201527f61696c00000000000000000000000000000000000000000000000000000000006064820152608401610654565b73ffffffffffffffffffffffffffffffffffffffff83163014611d775760405173ffffffffffffffffffffffffffffffffffffffff8416908390600081818185875af1925050503d8060008114611d67576040519150601f19603f3d011682016040523d82523d6000602084013e611d6c565b606091505b505080915050610674565b50600192915050565b80611d8a57505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832093861683529290522054811115611e26576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4d756c74692f6465626974546f6b656e2f696e73756666696369656e740000006044820152606401610654565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832093861683529290529081208054839290611e6a908490613c99565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f7a97b405ee1bd89550b225932dbdd0431e30426b7c8f02f05b3cb0e1bdfb847683604051611ed091815260200190565b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260046020908152604080832093861683529290529081208054839290611f219084906140b2565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fb2b1ec266d1bab793ae1d020eedf03e575cc390e5fb9e370cb099fdf2f61534d83604051611ed091815260200190565b611f9081612985565b50565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600090819073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612022573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120469190613bd9565b905062ffffff8711156120595760015496505b6040517f49f6d2dc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c811660048301528b81166024830152604482018b9052606482018a90526084820189905260a4820188905260c482018790527f000000000000000000000000000000000000000000000000000000000000000016906349f6d2dc90859060e40160206040518083038185885af19350505050801561214e575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261214b91810190613bd9565b60015b6122035761215a6140ca565b806308c379a014156121f7575061216f6140e6565b8061217a57506121f9565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156121c357600092505050612222565b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065491906141f9565b505b3d6000803e3d6000fd5b61220f8c8c8388612b8c565b6122198583612c30565b91506122229050565b9998505050505050505050565b600061223c8b8b8661197a565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146122d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f4d756c74692f7570646174654f666665722f756e617574686f72697a656400006044820152606401610654565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561235d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123819190613bd9565b905062ffffff8811156123945760015497505b6040517f6a4f769100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301528c81166024830152604482018c9052606482018b9052608482018a905260a4820189905260c4820188905260e482018790527f00000000000000000000000000000000000000000000000000000000000000001690636a4f7691908590610104016000604051808303818588803b15801561245157600080fd5b505af193505050508015612463575060015b6124d85761246f6140ca565b806308c379a014156121f757506124846140e6565b8061248f57506121f9565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614156121c3576000925050506124e7565b6124e28482612c30565b849150505b9a9950505050505050505050565b60006106718383612d1e565b60006106718383612d66565b73ffffffffffffffffffffffffffffffffffffffff85811660009081526002602090815260408083208885168452825280832087845290915281205490918381169116146125b7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4d756c74692f726574726163744f666665722f756e617574686f72697a6564006044820152606401610654565b6040517fad97db1b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015286811660248301526044820186905284151560648301527f0000000000000000000000000000000000000000000000000000000000000000169063ad97db1b906084016020604051808303816000875af115801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190613bd9565b90508015611653576116538282612f8c565b6040517fcbf75c9a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301528581166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063cbf75c9a906044016040805180830381865afa15801561272e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612752919061420c565b6040517f5722647b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8b811660048301528a81166024830152604482018890529294509092506000917f00000000000000000000000000000000000000000000000000000000000000001690635722647b90606401602060405180830381865afa1580156127f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281a9190613bd9565b9050600086604085901c61ffff16111561283d575061ffff604084901c16612840565b50855b62ffffff8811156128515760015497505b60008161286762ffffff606087901c168b6140b2565b6128719190613c21565b61287f90633b9aca00613c21565b9050600061ffff602085901c166128a662ffffff603087901c811690604888901c166140b2565b6128b09190613c21565b6128be90633b9aca00613c21565b905060006128cc8e836140b2565b9050828110156128e5576128e08184613c99565b6128e8565b60005b9e9d5050505050505050505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b60d4288826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561296257600080fd5b505af1158015612976573d6000803e3d6000fd5b505050505061177b8282612f8c565b60006129908261300e565b9050600061299d83613033565b9050816129a957505050565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016636a4f76916129f2602086018661352c565b612a02604087016020880161352c565b848660c089013560481c62ffffff1660c08a013560201c61ffff1660608b013560c01c63ffffffff16604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08b901b16815273ffffffffffffffffffffffffffffffffffffffff988916600482015297909616602488015260448701949094526064860192909252608485015260a484015260c483015286013560e482015261010401600060405180830381600087803b158015612ac357600080fd5b505af1925050508015612ad4575060015b61117f57612ae06140ca565b806308c379a014156121f75750612af56140e6565b80612b0057506121f9565b612b10604085016020860161352c565b73ffffffffffffffffffffffffffffffffffffffff16612b33602086018661352c565b73ffffffffffffffffffffffffffffffffffffffff167f768269e5e6803a8bc566de9364d8347774fff5b114c5a2ec556ab0459a172426866040013584604051612b7e929190614230565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260026020908152604080832088861680855290835281842088855283529281902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001695871695861790555193845285939192917fabf04a4ce23225c02bd147297da7ffc10e7d29102d8678f1a63fdd2cfd71ff07910160405180910390a450505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ce19190613bd9565b905081811415612cf057505050565b81811115612d0b5761117f83612d068484613c99565b612f8c565b61117f83612d198385613c99565b611a9b565b600082612d2d57506000610674565b6000612d59612d3f602085018561352c565b612d4f604086016020870161352c565b856040013561197a565b905061078a848285613055565b600080612d79612d3f602085018561352c565b90506000612d95612d8d602086018661352c565b600084610853565b50905080851115612daa578492505050610674565b6000612dbc61022c602087018761352c565b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015230602483015260448201899052919250908216906323b872dd906064016020604051808303816000875af1925050508015612e75575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252612e72918101906138ec565b60015b612e7e57612ea8565b8015612ea657612e8f8730886132bf565b15612e9957600080fd5b6000945050505050610674565b505b60408501803590612ebc906020880161352c565b73ffffffffffffffffffffffffffffffffffffffff16612edf602088018861352c565b73ffffffffffffffffffffffffffffffffffffffff167f571c6a99fbcd17b1f71790d4830c4a356ad85ab9b87af15ca9cb8bf9e76dafb7604051612f7a9060208082526022908201527f6161766556334c656e6465722f6f7665726c79696e675472616e73666572466160408201527f696c000000000000000000000000000000000000000000000000000000000000606082015260800190565b60405180910390a45093949350505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003602052604081208054839290612fc19084906140b2565b909155505060405181815273ffffffffffffffffffffffffffffffffffffffff8316907f2022607feefe24f258126b277628af517f5512dd9499fb3520eeff54cad1370390602001611ba8565b600060808201356bffffffffffffffffffffffff6060840135165b6106749190613c99565b600060a0820135606080840135901c6bffffffffffffffffffffffff16613029565b600073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663e8eda9df6130a3604085016020860161352c565b60055460405160e084901b7fffffffff0000000000000000000000000000000000000000000000000000000016815273ffffffffffffffffffffffffffffffffffffffff928316600482015260248101899052918716604483015261ffff166064820152608401600060405180830381600087803b15801561312457600080fd5b505af1925050508015613135575060015b6132af576131416140ca565b806308c379a014156131ed57506131566140e6565b8061316157506131ef565b60408301803590613175906020860161352c565b73ffffffffffffffffffffffffffffffffffffffff16613198602086018661352c565b73ffffffffffffffffffffffffffffffffffffffff167f3f9279e5961b9f7718863c58856167c37214b0eaa73c8ece15967da7ba8431f788856040516131df929190614230565b60405180910390a4506132b7565b505b60408201803590613203906020850161352c565b73ffffffffffffffffffffffffffffffffffffffff16613226602085018561352c565b73ffffffffffffffffffffffffffffffffffffffff167f3f9279e5961b9f7718863c58856167c37214b0eaa73c8ece15967da7ba8431f7876040516132a2918152604060208201819052600a908201527f756e657870656374656400000000000000000000000000000000000000000000606082015260800190565b60405180910390a46132b7565b506000611a1e565b509192915050565b600073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166369328dec61330a602085018561352c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810188905290861660448201526064016020604051808303816000875af19250505080156133be575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526133bb91810190613bd9565b60015b613479576133ca6140ca565b806308c379a014156121f757506133df6140e6565b806133ea57506121f9565b604083018035906133fe906020860161352c565b73ffffffffffffffffffffffffffffffffffffffff16613421602086018661352c565b73ffffffffffffffffffffffffffffffffffffffff167f3aa32c175e32764fe670a20f7800e840796a2c690e646f8d73ad446ae04628e98885604051613468929190614230565b60405180910390a484915050611a1e565b8085141561348b576000915050611a1e565b6134958186613c99565b915050611a1e565b73ffffffffffffffffffffffffffffffffffffffff81168114611f9057600080fd5b600080604083850312156134d257600080fd5b82356134dd8161349d565b946020939093013593505050565b60008060006060848603121561350057600080fd5b833561350b8161349d565b9250602084013561351b8161349d565b929592945050506040919091013590565b60006020828403121561353e57600080fd5b8135611a1e8161349d565b6000806040838503121561355c57600080fd5b82356135678161349d565b915060208301356135778161349d565b809150509250929050565b8015158114611f9057600080fd5b6000806000606084860312156135a557600080fd5b83356135b08161349d565b925060208401356135c081613582565b915060408401356135d08161349d565b809150509250925092565b6000602082840312156135ed57600080fd5b5035919050565b600061012082840312156114bd57600080fd5b60008082840361016081121561361c57600080fd5b61362685856135f4565b925060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee08201121561365857600080fd5b50610120830190509250929050565b600080600080600080600060e0888a03121561368257600080fd5b873561368d8161349d565b9650602088013561369d8161349d565b96999698505050506040850135946060810135946080820135945060a0820135935060c0909101359150565b600080600080600080600080610100898b0312156136e657600080fd5b88356136f18161349d565b975060208901356137018161349d565b979a9799505050506040860135956060810135956080820135955060a0820135945060c0820135935060e0909101359150565b6000610120828403121561374757600080fd5b61067183836135f4565b6000806000806080858703121561376757600080fd5b84356137728161349d565b935060208501356137828161349d565b925060408501359150606085013561379981613582565b939692955090935050565b600080600080600060a086880312156137bc57600080fd5b85356137c78161349d565b945060208601356137d78161349d565b935060408601356137e78161349d565b94979396509394606081013594506080013592915050565b6000606082018583526020606081850152818651808452608086019150828801935060005b8181101561384057845183529383019391830191600101613824565b50508481036040860152855180825290820192508186019060005b8181101561388d57825173ffffffffffffffffffffffffffffffffffffffff168552938301939183019160010161385b565b509298975050505050505050565b600080600080600060a086880312156138b357600080fd5b85356138be8161349d565b945060208601356138ce8161349d565b94979496505050506040830135926060810135926080909101359150565b6000602082840312156138fe57600080fd5b8151611a1e81613582565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810181811067ffffffffffffffff8211171561395857613958613909565b60405250565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff821117156139a2576139a2613909565b6040525050565b6040516101e0810167ffffffffffffffff811182821017156139cd576139cd613909565b60405290565b6000602082840312156139e557600080fd5b6040516020810181811067ffffffffffffffff82111715613a0857613a08613909565b6040529151825250919050565b80516fffffffffffffffffffffffffffffffff81168114613a3557600080fd5b919050565b805164ffffffffff81168114613a3557600080fd5b805161ffff81168114613a3557600080fd5b8051613a358161349d565b60006101e08284031215613a7f57600080fd5b613a876139a9565b613a9184846139d3565b8152613a9f60208401613a15565b6020820152613ab060408401613a15565b6040820152613ac160608401613a15565b6060820152613ad260808401613a15565b6080820152613ae360a08401613a15565b60a0820152613af460c08401613a3a565b60c0820152613b0560e08401613a4f565b60e0820152610100613b18818501613a61565b90820152610120613b2a848201613a61565b90820152610140613b3c848201613a61565b90820152610160613b4e848201613a61565b90820152610180613b60848201613a15565b908201526101a0613b72848201613a15565b908201526101c0613b84848201613a15565b908201529392505050565b60008060008060008060c08789031215613ba857600080fd5b865195506020870151945060408701519350606087015192506080870151915060a087015190509295509295509295565b600060208284031215613beb57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613c5957613c59613bf2565b500290565b600082613c94577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015613cab57613cab613bf2565b500390565b600181815b80851115613d0957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613cef57613cef613bf2565b80851615613cfc57918102915b93841c9390800290613cb5565b509250929050565b600082613d2057506001610674565b81613d2d57506000610674565b8160018114613d435760028114613d4d57613d69565b6001915050610674565b60ff841115613d5e57613d5e613bf2565b50506001821b610674565b5060208310610133831016604e8410600b8410161715613d8c575081810a610674565b613d968383613cb0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821115613dc857613dc8613bf2565b029392505050565b60006106718383613d11565b600067ffffffffffffffff821115613df657613df6613909565b5060051b60200190565b600082601f830112613e1157600080fd5b81516020613e1e82613ddc565b60408051613e2c838261395e565b84815260079490941b8601830193838101925087851115613e4c57600080fd5b8387015b85811015613ea0576080818a031215613e695760008081fd5b8251613e7481613938565b815181528582015186820152838201518482015260608083015190820152845292840192608001613e50565b50979650505050505050565b600082601f830112613ebd57600080fd5b81516020613eca82613ddc565b60408051613ed8838261395e565b84815260079490941b8601830193838101925087851115613ef857600080fd5b8387015b85811015613ea0576080818a031215613f155760008081fd5b8251613f2081613938565b8151613f2b8161349d565b81528186015186820152838201518482015260608083015190820152845292840192608001613efc565b60008060008060808587031215613f6b57600080fd5b8451935060208086015167ffffffffffffffff80821115613f8b57600080fd5b818801915088601f830112613f9f57600080fd5b8151613faa81613ddc565b604051613fb7828261395e565b82815260059290921b840185019185810191508b831115613fd757600080fd5b938501935b82851015613ff557845182529385019390850190613fdc565b60408b0151909850945050508083111561400e57600080fd5b61401a89848a01613e00565b9450606088015192508083111561403057600080fd5b505061403e87828801613eac565b91505092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156140ab576140ab613bf2565b5060010190565b600082198211156140c5576140c5613bf2565b500190565b600060033d11156140e35760046000803e5060005160e01c5b90565b600060443d10156140f45790565b6040517ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc803d016004833e81513d67ffffffffffffffff816024840111818411171561414257505050505090565b828501915081518181111561415a5750505050505090565b843d87010160208285010111156141745750505050505090565b6141836020828601018761395e565b509095945050505050565b6000815180845260005b818110156141b457602081850181015186830182015201614198565b818111156141c6576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000610671602083018461418e565b6000806040838503121561421f57600080fd5b505080516020909101519092909150565b82815260406020820152600061078a604083018461418e56fea264697066735822122098ae58d729072f1d0e5495d5684120a271e2439800a8b29dd1056caf34b547fa64736f6c634300080a0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "NewOwnedOffer(address,address,uint256,address)": {
        "notice": "Multi offer specific Events "
      },
      "PosthookFail(address,address,uint256,string)": {
        "notice": "Events "
      }
    },
    "kind": "user",
    "methods": {
      "approveLender(address,uint256)": {
        "notice": "approval of overlying contract by the underlying is necessary for minting and repaying borrowuser must use this function to do so."
      },
      "approveMangrove(address,uint256)": {
        "notice": "`this` contract needs to approve Mangrove to let it perform outbound token transfer at the end of the `makerExecute` function NB anyone can call this function"
      },
      "maxGettableUnderlying(address,bool,address)": {
        "notice": "Computes maximal maximal redeem capacity (R) and max borrow capacity (B|R) after R has been redeemed returns (R, B|R)"
      },
      "withdrawFromMangrove(address,uint256)": {
        "notice": "withdraws ETH from the bounty vault of the Mangrove. NB: `Mangrove.fund` function need not be called by `this` so is not included here. Warning: this function should not be called internally for msg.sender provision is being checked"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21694,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 11508,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "OFR_GASREQ",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 13101,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "_offerOwners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_address)))"
      },
      {
        "astId": 13105,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "mgvBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13111,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "tokenBalanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 10182,
        "contract": "contracts/Strategies/OfferLogics/MultiUsers/Deployable/OfferProxy.sol:OfferProxy",
        "label": "referralCode",
        "offset": 0,
        "slot": "5",
        "type": "t_uint16"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_mapping(t_uint256,t_address)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => mapping(uint256 => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
